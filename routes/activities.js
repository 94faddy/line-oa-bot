const express = require('express');
const router = express.Router();

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
function getRemainingTime(userId, activityId, userMessageHistory, activities) {
  const key = `${userId}_${activityId}`;
  const lastSentTime = userMessageHistory.get(key);
  if (!lastSentTime) return 0;
  
  const activity = activities.find(a => a.id === activityId);
  if (!activity) return 0;
  
  const currentTime = Date.now();
  const timeDiff = currentTime - lastSentTime;
  const cooldownPeriod = activity.cooldownHours * 60 * 60 * 1000;
  const remaining = cooldownPeriod - timeDiff;
  
  return remaining > 0 ? remaining : 0;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏ó‡∏µ
function formatTime(milliseconds) {
  const hours = Math.floor(milliseconds / (1000 * 60 * 60));
  const minutes = Math.floor((milliseconds % (1000 * 60 * 60)) / (1000 * 60));
  return `${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô validate message boxes
function validateMessageBoxes(boxes) {
  if (!Array.isArray(boxes) || boxes.length === 0) {
    return { valid: false, error: '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 message box' };
  }

  for (let i = 0; i < boxes.length; i++) {
    const box = boxes[i];
    
    if (!box.type || !['text', 'image', 'flex'].includes(box.type)) {
      return { valid: false, error: `Message box ${i + 1}: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á` };
    }

    if (box.type === 'text' && (!box.content || box.content.trim() === '')) {
      return { valid: false, error: `Message box ${i + 1}: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°` };
    }

    if (box.type === 'image' && (!box.content || !box.content.trim().startsWith('http'))) {
      return { valid: false, error: `Message box ${i + 1}: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á` };
    }

    if (box.type === 'flex') {
      if (!box.content || box.content.trim() === '') {
        return { valid: false, error: `Message box ${i + 1}: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Flex Message JSON` };
      }
      try {
        const flexJson = JSON.parse(box.content);
        if (!flexJson.type || !flexJson.body) {
          return { valid: false, error: `Message box ${i + 1}: Flex JSON ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ type ‡πÅ‡∏•‡∏∞ body` };
        }
      } catch (e) {
        return { valid: false, error: `Message box ${i + 1}: Flex JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ${e.message}` };
      }
    }
  }

  return { valid: true };
}

// Setup Activities Routes
function setupActivitiesRoutes(requireLogin, appConfig, userMessageHistory, saveConfig) {
  
  // ‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ä‡∏£‡πå
  router.get('/activities', requireLogin, (req, res) => {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á activities array ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!appConfig.activities) {
      appConfig.activities = [];
      saveConfig();
    }

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const allUsers = new Set();
    userMessageHistory.forEach((timestamp, key) => {
      const userId = key.split('_')[0];
      allUsers.add(userId);
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
    const activitiesData = appConfig.activities.map(activity => {
      const users = [];
      allUsers.forEach(userId => {
        const key = `${userId}_${activity.id}`;
        const timestamp = userMessageHistory.get(key);
        
        if (timestamp) {
          const date = new Date(timestamp);
          const remaining = getRemainingTime(userId, activity.id, userMessageHistory, appConfig.activities);
          const canSend = remaining === 0;
          
          users.push({
            userId,
            lastSent: date.toLocaleString('th-TH'),
            canSend,
            remainingTime: canSend ? '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ' : formatTime(remaining)
          });
        }
      });

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      users.sort((a, b) => new Date(b.lastSent) - new Date(a.lastSent));

      return {
        ...activity,
        users,
        usersCanSend: users.filter(u => u.canSend).length
      };
    });

    res.render('activities', { 
      activities: activitiesData,
      lineChannels: appConfig.lineChannels || [],
      totalUsers: allUsers.size,
      username: req.session.username
    });
  });

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡∏°‡πà
  router.post('/activities/add', requireLogin, (req, res) => {
    try {
      const { name, messageBoxes, cooldownMessage, keywords, cooldownHours, channels, useCooldown, allowSharedKeywords } = req.body;

      if (!name || !messageBoxes || !keywords) {
        return res.status(400).json({ 
          success: false, 
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' 
        });
      }

      // Parse message boxes
      let parsedBoxes;
      try {
        parsedBoxes = typeof messageBoxes === 'string' ? JSON.parse(messageBoxes) : messageBoxes;
      } catch (e) {
        return res.status(400).json({
          success: false,
          message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö message boxes ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
        });
      }

      // Validate message boxes
      const validation = validateMessageBoxes(parsedBoxes);
      if (!validation.valid) {
        return res.status(400).json({
          success: false,
          message: validation.error
        });
      }

      if (!appConfig.activities) {
        appConfig.activities = [];
      }

      const newActivity = {
        id: 'activity-' + Date.now(),
        name: name.trim(),
        enabled: true,
        useCooldown: useCooldown === true || useCooldown === 'true',
        allowSharedKeywords: allowSharedKeywords === true || allowSharedKeywords === 'true',
        messageBoxes: parsedBoxes, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å message ‡πÄ‡∏õ‡πá‡∏ô messageBoxes
        cooldownMessage: cooldownMessage?.trim() || "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ {timeLeft} ‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä",
        keywords: keywords.split(',').map(k => k.trim()).filter(k => k),
        cooldownHours: parseFloat(cooldownHours) || 2,
        channels: Array.isArray(channels) ? channels : (channels ? [channels] : []),
        createdAt: new Date().toISOString()
      };

      appConfig.activities.push(newActivity);
      saveConfig();

      res.json({ 
        success: true, 
        message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        activity: newActivity
      });
    } catch (error) {
      console.error('Error adding activity:', error);
      res.status(500).json({ 
        success: false, 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: ' + error.message
      });
    }
  });

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
  router.post('/activities/update/:id', requireLogin, (req, res) => {
    try {
      const { id } = req.params;
      const { name, messageBoxes, cooldownMessage, keywords, cooldownHours, channels, useCooldown, allowSharedKeywords } = req.body;

      if (!appConfig.activities) {
        appConfig.activities = [];
      }

      const activityIndex = appConfig.activities.findIndex(a => a.id === id);
      
      if (activityIndex === -1) {
        return res.status(404).json({ 
          success: false, 
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ' 
        });
      }

      // Parse message boxes
      let parsedBoxes;
      try {
        parsedBoxes = typeof messageBoxes === 'string' ? JSON.parse(messageBoxes) : messageBoxes;
      } catch (e) {
        return res.status(400).json({
          success: false,
          message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö message boxes ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
        });
      }

      // Validate message boxes
      const validation = validateMessageBoxes(parsedBoxes);
      if (!validation.valid) {
        return res.status(400).json({
          success: false,
          message: validation.error
        });
      }

      appConfig.activities[activityIndex] = {
        ...appConfig.activities[activityIndex],
        name: name.trim(),
        useCooldown: useCooldown === true || useCooldown === 'true',
        allowSharedKeywords: allowSharedKeywords === true || allowSharedKeywords === 'true',
        messageBoxes: parsedBoxes, // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å message ‡πÄ‡∏õ‡πá‡∏ô messageBoxes
        cooldownMessage: cooldownMessage?.trim() || "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ {timeLeft} ‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä",
        keywords: keywords.split(',').map(k => k.trim()).filter(k => k),
        cooldownHours: parseFloat(cooldownHours) || 2,
        channels: Array.isArray(channels) ? channels : (channels ? [channels] : [])
      };

      saveConfig();

      res.json({ 
        success: true, 
        message: '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' 
      });
    } catch (error) {
      console.error('Error updating activity:', error);
      res.status(500).json({ 
        success: false, 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó: ' + error.message
      });
    }
  });

  // ‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
  router.post('/activities/delete/:id', requireLogin, (req, res) => {
    try {
      const { id } = req.params;

      if (!appConfig.activities) {
        appConfig.activities = [];
      }

      const activityIndex = appConfig.activities.findIndex(a => a.id === id);
      
      if (activityIndex === -1) {
        return res.status(404).json({ 
          success: false, 
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ' 
        });
      }

      const deletedActivity = appConfig.activities[activityIndex];
      appConfig.activities.splice(activityIndex, 1);
      
      // ‡∏•‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ
      const keysToDelete = [];
      userMessageHistory.forEach((value, key) => {
        if (key.includes(id)) {
          keysToDelete.push(key);
        }
      });
      keysToDelete.forEach(key => userMessageHistory.delete(key));

      saveConfig();

      res.json({ 
        success: true, 
        message: `‡∏•‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° "${deletedActivity.name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à` 
      });
    } catch (error) {
      console.error('Error deleting activity:', error);
      res.status(500).json({ 
        success: false, 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö' 
      });
    }
  });

  // ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
  router.post('/activities/toggle/:id', requireLogin, (req, res) => {
    try {
      const { id } = req.params;
      const { enabled } = req.body;

      if (!appConfig.activities) {
        appConfig.activities = [];
      }

      const activityIndex = appConfig.activities.findIndex(a => a.id === id);
      
      if (activityIndex === -1) {
        return res.status(404).json({ 
          success: false, 
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ' 
        });
      }

      appConfig.activities[activityIndex].enabled = enabled;
      saveConfig();

      res.json({ 
        success: true, 
        message: enabled ? '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' 
      });
    } catch (error) {
      console.error('Error toggling activity:', error);
      res.status(500).json({ 
        success: false, 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' 
      });
    }
  });

  // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
  router.post('/activities/clear-users/:id', requireLogin, (req, res) => {
    try {
      const { id } = req.params;
      
      let count = 0;
      const keysToDelete = [];
      
      userMessageHistory.forEach((value, key) => {
        if (key.includes(id)) {
          keysToDelete.push(key);
          count++;
        }
      });
      
      keysToDelete.forEach(key => userMessageHistory.delete(key));

      res.json({ 
        success: true, 
        message: `‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${count} ‡∏Ñ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à` 
      });
    } catch (error) {
      console.error('Error clearing users:', error);
      res.status(500).json({ 
        success: false, 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' 
      });
    }
  });

  return router;
}

module.exports = { setupActivitiesRoutes };