const express = require('express');
const router = express.Router();
const fs = require('fs');
const path = require('path');

// ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö LIFF Config
const LIFF_DIR = path.join(__dirname, '../liff');
const LIFF_CONFIG_PATH = path.join(LIFF_DIR, 'config.json');

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå liff ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if (!fs.existsSync(LIFF_DIR)) {
  fs.mkdirSync(LIFF_DIR, { recursive: true });
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config.json ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LIFF ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if (!fs.existsSync(LIFF_CONFIG_PATH)) {
  const defaultConfig = {
    liffSettings: {
      enabled: false,
      liffId: '',
      pageTitle: 'DOBBY99 ‡πÄ‡∏ß‡πá‡∏ö‡∏™‡∏•‡πá‡∏≠‡∏ï‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ !!!',
      shareText: '‚ú® ‡πÅ‡∏ä‡∏£‡πå‡∏•‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏•‡∏ô‡πå 6 ‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏´‡∏£‡∏∑‡∏≠ ‡πÅ‡∏ä‡∏£‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô 6 ‡∏Ñ‡∏ô (‡∏´‡πâ‡∏≤‡∏°‡∏ã‡πâ‡∏≥) ‚ú®',
      bannerImageUrl: 'https://img2.pic.in.th/pic/3a26970a78aa6f519b915ebc2b96555c.md.jpg',
      backgroundColor: '#0a0a0a',
      modalBackgroundColor: '#1a1a2e',
      buttonBackgroundColor: 'linear-gradient(45deg, #FF6B6B, #FF8E8E, #FF6B6B)',
      buttonTextColor: '#ffffff',
      customCSS: ''
    },
    flexMessages: []
  };
  fs.writeFileSync(LIFF_CONFIG_PATH, JSON.stringify(defaultConfig, null, 2), 'utf8');
}

// ‡πÇ‡∏´‡∏•‡∏î LIFF Config
let liffConfig = JSON.parse(fs.readFileSync(LIFF_CONFIG_PATH, 'utf8'));

// Migration: ‡πÄ‡∏û‡∏¥‡πà‡∏° bannerImageUrl ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if (!liffConfig.liffSettings.bannerImageUrl) {
  liffConfig.liffSettings.bannerImageUrl = 'https://img2.pic.in.th/pic/3a26970a78aa6f519b915ebc2b96555c.md.jpg';
  fs.writeFileSync(LIFF_CONFIG_PATH, JSON.stringify(liffConfig, null, 2), 'utf8');
  console.log('‚úÖ Added bannerImageUrl to LIFF config');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å LIFF Config
function saveLiffConfig() {
  fs.writeFileSync(LIFF_CONFIG_PATH, JSON.stringify(liffConfig, null, 2), 'utf8');
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á LINE LIFF URL
function generateLineLiffUrl(liffId) {
  if (!liffId || liffId.trim() === '') {
    return null;
  }
  return `https://liff.line.me/${liffId}`;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message Array ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LIFF
function generateFlexMessagesArray() {
  try {
    const enabledMessages = liffConfig.flexMessages
      .filter(msg => msg.enabled)
      .sort((a, b) => (a.order || 0) - (b.order || 0));

    if (enabledMessages.length === 0) {
      console.log('‚ö†Ô∏è No enabled flex messages found');
      return [];
    }

    console.log(`üì¶ Generating ${enabledMessages.length} flex message(s)`);

    const flexArray = enabledMessages.map((msg, index) => {
      console.log(`  - Flex #${index + 1}: ${msg.title}`);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Features List
      const featuresList = (msg.features || []).map(feature => ({
        type: 'box',
        layout: 'horizontal',
        contents: [
          {
            type: 'text',
            text: feature.icon || '‚ú®',
            size: 'sm',
            color: feature.color || '#4ECDC4',
            flex: 0
          },
          {
            type: 'text',
            text: feature.text || '',
            size: 'sm',
            color: '#ffffff',
            flex: 1,
            margin: 'sm'
          }
        ]
      }));

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Buttons
      const enabledButtons = (msg.buttons || [])
        .filter(btn => btn.enabled)
        .sort((a, b) => (a.order || 0) - (b.order || 0));

      const buttonContents = enabledButtons.map(btn => ({
        type: 'button',
        action: {
          type: 'uri',
          label: btn.label || '‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà',
          uri: btn.uri || 'https://line.me'
        },
        style: 'primary',
        color: btn.color || '#FF6B6B',
        height: 'md'
      }));

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Rating (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
      let ratingContent = null;
      if (msg.rating && msg.rating.enabled) {
        const stars = [];
        for (let i = 0; i < (msg.rating.stars || 5); i++) {
          stars.push({
            type: 'text',
            text: '‚≠ê',
            size: 'sm',
            color: msg.rating.color || '#FFD700',
            flex: 0
          });
        }

        ratingContent = {
          type: 'box',
          layout: 'horizontal',
          contents: [
            ...stars,
            {
              type: 'text',
              text: msg.rating.text || '5/5',
              size: 'sm',
              color: '#ffffff',
              flex: 1,
              align: 'end'
            }
          ],
          margin: 'sm'
        };
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Bubble
      const bubble = {
        type: 'bubble',
        size: 'mega',
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'image',
              url: msg.imageUrl || 'https://via.placeholder.com/1040x1040',
              size: 'full',
              aspectMode: 'cover',
              aspectRatio: '1:1',
              gravity: 'center',
              action: {
                type: 'uri',
                uri: msg.buttons?.[0]?.uri || 'https://line.me'
              }
            },
            {
              type: 'box',
              layout: 'vertical',
              contents: [
                {
                  type: 'text',
                  text: msg.title || 'Title',
                  weight: 'bold',
                  size: 'xl',
                  color: msg.titleColor || '#FFD700',
                  align: 'center'
                },
                {
                  type: 'text',
                  text: msg.subtitle || 'Subtitle',
                  weight: 'bold',
                  size: 'lg',
                  color: msg.subtitleColor || '#FF6B6B',
                  align: 'center',
                  margin: 'sm'
                },
                {
                  type: 'text',
                  text: msg.description || 'Description',
                  size: 'sm',
                  color: msg.descriptionColor || '#4ECDC4',
                  align: 'center',
                  margin: 'xs'
                }
              ],
              backgroundColor: msg.headerBackgroundColor || '#1A1A2E',
              paddingAll: 'md',
              spacing: 'sm'
            }
          ],
          paddingAll: '0px',
          spacing: 'none'
        },
        footer: {
          type: 'box',
          layout: 'vertical',
          contents: [
            ...(ratingContent ? [ratingContent] : []),
            ...(featuresList.length > 0 ? [
              {
                type: 'box',
                layout: 'vertical',
                contents: featuresList,
                spacing: 'sm',
                margin: ratingContent ? 'md' : 'none'
              }
            ] : []),
            ...(buttonContents.length > 0 ? [
              {
                type: 'box',
                layout: 'vertical',
                contents: buttonContents,
                spacing: 'sm',
                margin: 'lg'
              }
            ] : [])
          ],
          backgroundColor: msg.footerBackgroundColor || '#16213E',
          paddingAll: 'lg',
          spacing: 'sm'
        }
      };

      return bubble;
    });

    console.log('‚úÖ Flex messages generated successfully');
    return flexArray;
  } catch (error) {
    console.error('‚ùå Error generating flex messages array:', error);
    return [];
  }
}

// Setup LIFF Routes
function setupLiffRoutes(requireLogin) {
  
  // ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ LIFF
  router.get('/liff', requireLogin, (req, res) => {
    const sortedMessages = [...liffConfig.flexMessages].sort((a, b) => (a.order || 0) - (b.order || 0));
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á LIFF URL ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏° (LINE LIFF URL)
    const lineLiffUrl = generateLineLiffUrl(liffConfig.liffSettings.liffId);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á LIFF URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö endpoint (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
    const domain = process.env.DOMAIN;
    let endpointLiffUrl = '';
    
    if (domain) {
      const protocol = domain.includes('localhost') ? 'http' : 'https';
      endpointLiffUrl = `${protocol}://${domain}/liff/share`;
    } else {
      const protocol = req.protocol;
      const host = req.get('host');
      endpointLiffUrl = `${protocol}://${host}/liff/share`;
    }

    console.log('üìÑ LIFF Management Page accessed by:', req.session.username);
    console.log('üîó LINE LIFF URL:', lineLiffUrl || 'Not configured');
    console.log('üîó Endpoint LIFF URL:', endpointLiffUrl);

    res.render('liff', {
      settings: liffConfig.liffSettings,
      flexMessages: sortedMessages,
      totalMessages: liffConfig.flexMessages.length,
      enabledMessages: liffConfig.flexMessages.filter(m => m.enabled).length,
      lineLiffUrl: lineLiffUrl, // URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏£‡πå
      endpointLiffUrl: endpointLiffUrl, // URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      username: req.session.username
    });
  });

  // ‡∏´‡∏ô‡πâ‡∏≤ LIFF Share (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö endpoint)
  router.get('/liff/share', (req, res) => {
    try {
      console.log('üì§ LIFF Share page accessed');
      console.log('‚öôÔ∏è LIFF Settings:', {
        enabled: liffConfig.liffSettings.enabled,
        liffId: liffConfig.liffSettings.liffId ? 'Set ‚úÖ' : 'Not Set ‚ùå',
        bannerImageUrl: liffConfig.liffSettings.bannerImageUrl ? 'Set ‚úÖ' : 'Not Set ‚ùå',
        totalFlexMessages: liffConfig.flexMessages.length,
        enabledFlexMessages: liffConfig.flexMessages.filter(m => m.enabled).length
      });

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LIFF ‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!liffConfig.liffSettings.enabled) {
        console.warn('‚ö†Ô∏è LIFF is disabled');
        return res.status(503).render('error', {
          title: 'LIFF ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
          message: '‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå LIFF Share ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
          icon: '‚ö†Ô∏è',
          errorCode: 'LIFF_DISABLED'
        });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ LIFF ID ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!liffConfig.liffSettings.liffId) {
        console.warn('‚ö†Ô∏è LIFF ID not configured');
        return res.status(503).render('error', {
          title: 'LIFF ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
          message: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LIFF ID ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
          icon: '‚öôÔ∏è',
          errorCode: 'LIFF_NOT_CONFIGURED'
        });
      }

      const flexArray = generateFlexMessagesArray();
      
      console.log(`üìä Generated ${flexArray.length} flex message(s) for LIFF share`);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Flex Messages ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (flexArray.length === 0) {
        console.warn('‚ö†Ô∏è No enabled flex messages');
        return res.status(404).render('error', {
          title: '‡πÑ‡∏°‡πà‡∏û‡∏ö Flex Message',
          message: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Flex Message ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
          icon: 'üì≠',
          errorCode: 'NO_FLEX_MESSAGES'
        });
      }

      // Render LIFF Share page
      res.render('liff-share', {
        settings: liffConfig.liffSettings,
        flexMessagesJson: JSON.stringify(flexArray),
        flexCount: flexArray.length
      });

      console.log('‚úÖ LIFF Share page rendered successfully');
    } catch (error) {
      console.error('‚ùå Error rendering LIFF Share page:', error);
      res.status(500).render('error', {
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤ LIFF Share ‡πÑ‡∏î‡πâ: ' + error.message,
        icon: '‚ùå',
        errorCode: 'INTERNAL_ERROR'
      });
    }
  });

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LIFF
  router.post('/liff/settings', requireLogin, (req, res) => {
    try {
      const { 
        enabled, liffId, pageTitle, shareText, bannerImageUrl,
        backgroundColor, modalBackgroundColor, 
        buttonBackgroundColor, buttonTextColor, customCSS 
      } = req.body;
      
      console.log('‚öôÔ∏è Updating LIFF settings by:', req.session.username);
      
      liffConfig.liffSettings.enabled = enabled === 'true' || enabled === true;
      liffConfig.liffSettings.liffId = (liffId || '').trim();
      liffConfig.liffSettings.pageTitle = (pageTitle || '').trim();
      liffConfig.liffSettings.shareText = (shareText || '').trim();
      liffConfig.liffSettings.bannerImageUrl = (bannerImageUrl || '').trim();
      liffConfig.liffSettings.backgroundColor = (backgroundColor || '#0a0a0a').trim();
      liffConfig.liffSettings.modalBackgroundColor = (modalBackgroundColor || '#1a1a2e').trim();
      liffConfig.liffSettings.buttonBackgroundColor = (buttonBackgroundColor || 'linear-gradient(45deg, #FF6B6B, #FF8E8E, #FF6B6B)').trim();
      liffConfig.liffSettings.buttonTextColor = (buttonTextColor || '#ffffff').trim();
      liffConfig.liffSettings.customCSS = customCSS || '';
      
      saveLiffConfig();
      
      console.log('‚úÖ LIFF settings updated successfully');
      res.json({ success: true, message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    } catch (error) {
      console.error('‚ùå Error updating LIFF settings:', error);
      res.status(500).json({ success: false, message: error.message });
    }
  });

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° Flex Message
  router.post('/liff/add-flex', requireLogin, (req, res) => {
    try {
      const flexData = req.body;
      
      console.log('‚ûï Adding new flex message by:', req.session.username);
      
      const maxOrder = liffConfig.flexMessages.length > 0 
        ? Math.max(...liffConfig.flexMessages.map(m => m.order || 0))
        : -1;

      const newFlex = {
        id: `flex-${Date.now()}`,
        enabled: true,
        order: maxOrder + 1,
        imageUrl: flexData.imageUrl || '',
        title: flexData.title || 'Title',
        subtitle: flexData.subtitle || 'Subtitle',
        description: flexData.description || 'Description',
        headerBackgroundColor: flexData.headerBackgroundColor || '#1A1A2E',
        bodyBackgroundColor: flexData.bodyBackgroundColor || '#1A1A2E',
        footerBackgroundColor: flexData.footerBackgroundColor || '#16213E',
        titleColor: flexData.titleColor || '#FFD700',
        subtitleColor: flexData.subtitleColor || '#FF6B6B',
        descriptionColor: flexData.descriptionColor || '#4ECDC4',
        buttons: flexData.buttons || [],
        features: flexData.features || [],
        rating: flexData.rating || { enabled: true, stars: 5, text: '5/5', color: '#FFD700' }
      };

      liffConfig.flexMessages.push(newFlex);
      saveLiffConfig();
      
      console.log('‚úÖ Flex message added:', newFlex.title);
      res.json({ success: true, message: '‡πÄ‡∏û‡∏¥‡πà‡∏° Flex Message ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', flex: newFlex });
    } catch (error) {
      console.error('‚ùå Error adding flex message:', error);
      res.status(500).json({ success: false, message: error.message });
    }
  });

  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Flex Message
  router.post('/liff/update-flex', requireLogin, (req, res) => {
    try {
      const flexData = req.body;
      const index = liffConfig.flexMessages.findIndex(m => m.id === flexData.id);
      
      if (index === -1) {
        console.warn('‚ö†Ô∏è Flex message not found:', flexData.id);
        return res.status(404).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Flex Message' });
      }

      console.log('‚úèÔ∏è Updating flex message:', flexData.title, 'by:', req.session.username);

      liffConfig.flexMessages[index] = {
        ...liffConfig.flexMessages[index],
        ...flexData
      };

      saveLiffConfig();
      
      console.log('‚úÖ Flex message updated successfully');
      res.json({ success: true, message: '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Flex Message ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    } catch (error) {
      console.error('‚ùå Error updating flex message:', error);
      res.status(500).json({ success: false, message: error.message });
    }
  });

  // ‡∏•‡∏ö Flex Message
  router.post('/liff/delete-flex', requireLogin, (req, res) => {
    try {
      const { id } = req.body;
      
      const flexToDelete = liffConfig.flexMessages.find(m => m.id === id);
      if (!flexToDelete) {
        console.warn('‚ö†Ô∏è Flex message not found for deletion:', id);
        return res.status(404).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Flex Message' });
      }

      console.log('üóëÔ∏è Deleting flex message:', flexToDelete.title, 'by:', req.session.username);
      
      liffConfig.flexMessages = liffConfig.flexMessages.filter(m => m.id !== id);
      saveLiffConfig();
      
      console.log('‚úÖ Flex message deleted successfully');
      res.json({ success: true, message: '‡∏•‡∏ö Flex Message ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    } catch (error) {
      console.error('‚ùå Error deleting flex message:', error);
      res.status(500).json({ success: false, message: error.message });
    }
  });

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö Flex Messages
  router.post('/liff/reorder-flex', requireLogin, (req, res) => {
    try {
      const { flexIds } = req.body;
      
      if (!Array.isArray(flexIds)) {
        console.warn('‚ö†Ô∏è Invalid flex IDs format');
        return res.status(400).json({ success: false, message: 'Invalid flex IDs format' });
      }

      console.log('üîÑ Reordering flex messages by:', req.session.username);

      flexIds.forEach((id, index) => {
        const flex = liffConfig.flexMessages.find(m => m.id === id);
        if (flex) {
          flex.order = index;
        }
      });

      saveLiffConfig();
      
      console.log('‚úÖ Flex messages reordered successfully');
      res.json({ success: true, message: '‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    } catch (error) {
      console.error('‚ùå Error reordering flex messages:', error);
      res.status(500).json({ success: false, message: error.message });
    }
  });

  // Toggle Flex Message
  router.post('/liff/toggle-flex', requireLogin, (req, res) => {
    try {
      const { id, enabled } = req.body;
      
      const flex = liffConfig.flexMessages.find(m => m.id === id);
      if (!flex) {
        console.warn('‚ö†Ô∏è Flex message not found for toggle:', id);
        return res.status(404).json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Flex Message' });
      }

      const newStatus = enabled === 'true' || enabled === true;
      console.log(`üîÑ Toggling flex message "${flex.title}" to ${newStatus ? 'enabled' : 'disabled'} by:`, req.session.username);

      flex.enabled = newStatus;
      saveLiffConfig();
      
      console.log('‚úÖ Flex message toggled successfully');
      res.json({ success: true, message: `${newStatus ? '‡πÄ‡∏õ‡∏¥‡∏î' : '‡∏õ‡∏¥‡∏î'}‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Flex Message ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à` });
    } catch (error) {
      console.error('‚ùå Error toggling flex message:', error);
      res.status(500).json({ success: false, message: error.message });
    }
  });

  // Preview Flex Messages
  router.get('/liff/preview', requireLogin, (req, res) => {
    try {
      console.log('üîç Preview request received from:', req.session.username);
      
      const flexArray = generateFlexMessagesArray();
      
      console.log(`üìä Preview: Generated ${flexArray.length} flex message(s)`);
      
      if (flexArray.length === 0) {
        return res.json({ 
          success: false, 
          message: '‡πÑ‡∏°‡πà‡∏°‡∏µ Flex Message ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Flex Message ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
          flex: null,
          count: 0
        });
      }

      // ‡∏™‡πà‡∏á Flex Carousel ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      res.json({ 
        success: true,
        count: flexArray.length,
        flex: {
          type: 'carousel',
          contents: flexArray
        },
        timestamp: new Date().toISOString()
      });

      console.log('‚úÖ Preview generated successfully');
    } catch (error) {
      console.error('‚ùå Error creating preview:', error);
      res.status(500).json({ 
        success: false, 
        message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ' + error.message,
        error: error.toString(),
        count: 0
      });
    }
  });

  return router;
}

module.exports = { 
  setupLiffRoutes,
  liffConfig
};