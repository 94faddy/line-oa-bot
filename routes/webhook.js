const express = require('express');
const router = express.Router();
const crypto = require('crypto');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
function containsKeyword(text, keywords) {
  if (!text) return false;
  const lowerText = text.toLowerCase();
  return keywords.some(keyword => 
    lowerText.includes(keyword.toLowerCase())
  );
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
function canSendMessage(userId, userMessageHistory, getCooldownPeriod) {
  const lastSentTime = userMessageHistory.get(userId);
  if (!lastSentTime) return true;
  
  const currentTime = Date.now();
  const timeDiff = currentTime - lastSentTime;
  return timeDiff >= getCooldownPeriod();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
function recordMessageSent(userId, userMessageHistory) {
  userMessageHistory.set(userId, Date.now());
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
function getRemainingTime(userId, userMessageHistory, getCooldownPeriod) {
  const lastSentTime = userMessageHistory.get(userId);
  if (!lastSentTime) return 0;
  
  const currentTime = Date.now();
  const timeDiff = currentTime - lastSentTime;
  const remaining = getCooldownPeriod() - timeDiff;
  
  return remaining > 0 ? remaining : 0;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏ó‡∏µ
function formatTime(milliseconds) {
  const hours = Math.floor(milliseconds / (1000 * 60 * 60));
  const minutes = Math.floor((milliseconds % (1000 * 60 * 60)) / (1000 * 60));
  return `${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Cooldown ‡∏û‡∏£‡πâ‡∏≠‡∏° placeholder
function getCooldownMessage(userId, cooldownMessageTemplate, userMessageHistory, getCooldownPeriod) {
  const remaining = getRemainingTime(userId, userMessageHistory, getCooldownPeriod);
  const timeLeft = formatTime(remaining);
  const template = cooldownMessageTemplate || "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ {timeLeft} ‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä";
  return template.replace('{timeLeft}', timeLeft);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤ LINE Client ‡∏à‡∏≤‡∏Å signature
function findClientBySignature(signature, body) {
  for (const [channelId, clientData] of global.lineClients.entries()) {
    const hash = crypto
      .createHmac('SHA256', clientData.channelSecret)
      .update(body)
      .digest('base64');
    
    if (hash === signature) {
      return {
        client: clientData.client,
        channelId: channelId,
        config: clientData.config
      };
    }
  }
  return null;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô safe reply - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
async function safeReplyMessage(lineClient, replyToken, messages, channelName) {
  try {
    // Validate messages
    if (!messages || !Array.isArray(messages) || messages.length === 0) {
      console.error(`‚ùå [${channelName}] Invalid messages array`);
      return false;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ message
    const validMessages = messages.filter(msg => {
      if (!msg || typeof msg !== 'object') {
        console.warn(`‚ö†Ô∏è [${channelName}] Invalid message object`);
        return false;
      }
      if (!msg.type) {
        console.warn(`‚ö†Ô∏è [${channelName}] Message missing type`);
        return false;
      }
      if (msg.type === 'text' && (!msg.text || msg.text.trim() === '')) {
        console.warn(`‚ö†Ô∏è [${channelName}] Text message has empty text`);
        return false;
      }
      if (msg.type === 'flex' && !msg.contents) {
        console.warn(`‚ö†Ô∏è [${channelName}] Flex message missing contents`);
        return false;
      }
      return true;
    });

    if (validMessages.length === 0) {
      console.error(`‚ùå [${channelName}] No valid messages to send`);
      return false;
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    await lineClient.replyMessage({
      replyToken: replyToken,
      messages: validMessages
    });

    console.log(`‚úÖ [${channelName}] Message sent successfully`);
    return true;
  } catch (error) {
    console.error(`‚ùå [${channelName}] Error in safeReplyMessage:`, error.message);
    if (error.body) {
      console.error(`Error body:`, error.body);
    }
    return false;
  }
}

// Setup Webhook Route
function setupWebhookRoute(
  appConfig, 
  userMessageHistory, 
  getCooldownPeriod, 
  containsPromotionKeyword, 
  createPromotionFlexMessage, 
  getRandomFlex, 
  getQuickReplyMenu,
  containsQuickReplyKeyword,
  containsFlexKeyword,
  quickReplyConfig,
  createWelcomeFlexMessage,
  welcomeConfig
) {
  
  router.post('/webhook', express.json(), async (req, res) => {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ LINE Channel ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (global.lineClients.size === 0) {
        console.log('‚ö†Ô∏è Webhook received but no LINE channels are configured');
        return res.status(200).send('No channels configured');
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö signature
      const signature = req.get('x-line-signature');
      if (!signature) {
        console.log('‚ùå No signature provided');
        return res.status(401).send('No signature');
      }

      // ‡∏´‡∏≤ LINE Client ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö signature
      const body = JSON.stringify(req.body);
      const clientData = findClientBySignature(signature, body);

      if (!clientData) {
        console.log('‚ùå Invalid signature - no matching channel found');
        return res.status(401).send('Invalid signature');
      }

      console.log(`‚úÖ Webhook verified for channel: ${clientData.config.name} (${clientData.channelId})`);

      const events = req.body.events;
      await Promise.all(events.map(event => 
        handleEvent(
          event, 
          clientData.client,
          clientData.config,
          appConfig, 
          userMessageHistory, 
          getCooldownPeriod, 
          containsPromotionKeyword, 
          createPromotionFlexMessage, 
          getRandomFlex, 
          getQuickReplyMenu,
          containsQuickReplyKeyword,
          containsFlexKeyword,
          quickReplyConfig,
          createWelcomeFlexMessage,
          welcomeConfig
        )
      ));
      
      res.status(200).send('OK');
    } catch (err) {
      console.error('Error in webhook:', err);
      res.status(500).send('Internal Server Error');
    }
  });

  return router;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Event
async function handleEvent(
  event, 
  lineClient,
  channelConfig,
  appConfig, 
  userMessageHistory, 
  getCooldownPeriod, 
  containsPromotionKeyword, 
  createPromotionFlexMessage, 
  getRandomFlex, 
  getQuickReplyMenu,
  containsQuickReplyKeyword,
  containsFlexKeyword,
  quickReplyConfig,
  createWelcomeFlexMessage,
  welcomeConfig
) {
  // ============================================
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Event Type: Follow Event (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà)
  // ============================================
  if (event.type === 'follow') {
    console.log(`üëã [${channelConfig.name}] New follower: ${event.source.userId}`);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Global Settings
    if (!welcomeConfig.welcomeSettings.enabled) {
      console.log(`‚ÑπÔ∏è [${channelConfig.name}] Welcome feature is GLOBALLY DISABLED`);
      return null;
    }

    if (!welcomeConfig.welcomeSettings.showOnFollow) {
      console.log(`‚ÑπÔ∏è [${channelConfig.name}] Welcome showOnFollow is DISABLED`);
      return null;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Channel ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Welcome Feature ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const features = channelConfig.features || {};
    
    if (!features.welcome) {
      console.log(`‚ÑπÔ∏è [${channelConfig.name}] Welcome feature is disabled for this channel`);
      return null;
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Welcome Message
    console.log(`üéâ [${channelConfig.name}] Creating Welcome Message...`);
    const welcomeMessage = createWelcomeFlexMessage();
    
    if (!welcomeMessage) {
      console.log(`‚ö†Ô∏è [${channelConfig.name}] Welcome message is NULL - check config`);
      return null;
    }

    // Validate welcome message structure
    if (!welcomeMessage.type || !welcomeMessage.contents || !welcomeMessage.altText) {
      console.error(`‚ùå [${channelConfig.name}] Welcome message has invalid structure`);
      return null;
    }
    
    console.log(`üì§ [${channelConfig.name}] Sending Welcome Message...`);
    
    // ‡∏™‡πà‡∏á Welcome Message
    const success = await safeReplyMessage(
      lineClient,
      event.replyToken,
      [welcomeMessage],
      channelConfig.name
    );

    if (success) {
      console.log(`‚úÖ [${channelConfig.name}] Welcome message sent to ${event.source.userId}`);
    } else {
      console.error(`‚ùå [${channelConfig.name}] Failed to send welcome message`);
    }
    
    return null;
  }

  // ============================================
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Event Type: Message Event
  // ============================================
  if (event.type !== 'message' || event.message.type !== 'text') {
    return null;
  }
  
  if (!lineClient) {
    console.error('LINE client not available');
    return null;
  }
  
  const userId = event.source.userId;
  const messageText = event.message.text;
  
  console.log(`üì© [${channelConfig.name}] Received message from ${userId}: ${messageText}`);
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Features ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Channel ‡∏ô‡∏µ‡πâ
  const features = channelConfig.features || {
    welcome: true,
    activities: true,
    promotions: true,
    flexMessages: true
  };

  console.log(`üîß [${channelConfig.name}] Features:`, features);
  
  // ============================================
  // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏Å‡πà‡∏≠‡∏ô
  // ============================================
  if (features.promotions && containsPromotionKeyword(messageText)) {
    console.log(`üé® [${channelConfig.name}] Promotion keyword detected!`);
    
    const flexMessage = createPromotionFlexMessage();
    
    if (flexMessage) {
      await safeReplyMessage(
        lineClient,
        event.replyToken,
        [flexMessage],
        channelConfig.name
      );
    } else {
      await safeReplyMessage(
        lineClient,
        event.replyToken,
        [{
          type: 'text',
          text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏© üòä'
        }],
        channelConfig.name
      );
    }
    
    return null;
  }
  
  // ============================================
  // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ä‡∏£‡πå
  // ============================================
  if (features.activities && containsKeyword(messageText, appConfig.botSettings.keywords)) {
    console.log(`üéÅ [${channelConfig.name}] Activity keyword detected!`);
    
    if (canSendMessage(userId, userMessageHistory, getCooldownPeriod)) {
      await safeReplyMessage(
        lineClient,
        event.replyToken,
        [{
          type: 'text',
          text: appConfig.botSettings.activityMessage
        }],
        channelConfig.name
      );
      
      recordMessageSent(userId, userMessageHistory);
      console.log(`‚úÖ [${channelConfig.name}] Activity sent to ${userId}`);
    } else {
      const cooldownMsg = getCooldownMessage(
        userId, 
        appConfig.botSettings.cooldownMessage, 
        userMessageHistory, 
        getCooldownPeriod
      );
      
      await safeReplyMessage(
        lineClient,
        event.replyToken,
        [{
          type: 'text',
          text: cooldownMsg
        }],
        channelConfig.name
      );
      
      const remaining = getRemainingTime(userId, userMessageHistory, getCooldownPeriod);
      const timeLeft = formatTime(remaining);
      console.log(`‚è≥ [${channelConfig.name}] Cooldown active for ${userId}, ${timeLeft} remaining`);
    }
    
    return null;
  }
  
  // ============================================
  // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î Flex Message
  // ============================================
  if (features.flexMessages && containsFlexKeyword(messageText)) {
    console.log(`üí¨ [${channelConfig.name}] Flex Message keyword detected!`);
    
    try {
      const randomFlex = getRandomFlex();
      
      if (!randomFlex) {
        await safeReplyMessage(
          lineClient,
          event.replyToken,
          [{
            type: 'text',
            text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Flex Message'
          }],
          channelConfig.name
        );
        return null;
      }

      const messages = [
        {
          type: 'flex',
          altText: 'üìä ‡πÄ‡∏Å‡∏°‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ä‡∏ô‡∏∞‡∏™‡∏π‡∏á',
          contents: randomFlex
        }
      ];

      // ‡∏™‡πà‡∏á Quick Reply ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö Flex ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ
      if (quickReplyConfig.flexMessageSettings.sendWithQuickReply) {
        const quickReply = getQuickReplyMenu();
        if (quickReply) {
          messages.push(quickReply);
        }
      }
      
      await safeReplyMessage(
        lineClient,
        event.replyToken,
        messages,
        channelConfig.name
      );
      
      console.log(`‚úÖ [${channelConfig.name}] Flex Message sent`);
    } catch (error) {
      console.error(`‚ùå [${channelConfig.name}] Error sending Flex Message:`, error);
      await safeReplyMessage(
        lineClient,
        event.replyToken,
        [{
          type: 'text',
          text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
        }],
        channelConfig.name
      );
    }
    
    return null;
  }
  
  // ============================================
  // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î Quick Reply Menu
  // ============================================
  if (features.flexMessages && containsQuickReplyKeyword(messageText)) {
    console.log(`üîò [${channelConfig.name}] Quick Reply keyword detected!`);
    
    const quickReply = getQuickReplyMenu();
    
    if (quickReply) {
      await safeReplyMessage(
        lineClient,
        event.replyToken,
        [quickReply],
        channelConfig.name
      );
    } else {
      await safeReplyMessage(
        lineClient,
        event.replyToken,
        [{
          type: 'text',
          text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ Quick Reply Menu ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
        }],
        channelConfig.name
      );
    }
    
    return null;
  }
  
  // ============================================
  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏î‡πÜ
  // ============================================
  console.log(`‚ÑπÔ∏è [${channelConfig.name}] No matching keyword for message: ${messageText}`);
  return null;
}

module.exports = { setupWebhookRoute };