require('dotenv').config();
const express = require('express');
const line = require('@line/bot-sdk');
const session = require('express-session');
const cookieParser = require('cookie-parser');
const fs = require('fs');
const path = require('path');
const app = express();

// ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å config.json
const configPath = path.join(__dirname, 'data', 'config.json');

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config.json ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if (!fs.existsSync(configPath)) {
  const defaultConfig = {
    lineChannels: [],
    activities: [],
    botSettings: {
      activityMessage: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ü‡∏£‡∏µ 100\n‡πÅ‡∏ä‡∏£‡πå‡πÇ‡∏û‡∏™‡∏•‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 6 ‡∏Å‡∏•‡∏∏‡πà‡∏° Facebook ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‡∏™‡∏•‡πá‡∏≠‡∏ï ‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏´‡πâ‡∏≤‡∏°‡∏ã‡πâ‡∏≥)\nüî∑ https://9iot.cc/w99\n‡∏Å‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° üéØ ‡∏Å‡∏î‡∏ñ‡∏π‡∏Å‡πÉ‡∏à ‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞\nüíû‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏Ñ‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞\n(‡∏´‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° 4 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡∏≠‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏ô‡∏∞‡∏Ñ‡∏∞)",
      cooldownMessage: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ {timeLeft} ‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä",
      keywords: ["‡∏ü‡∏£‡∏µ", "free", "‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ", "‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï", "‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï"],
      cooldownHours: 2
    }
  };
  fs.writeFileSync(configPath, JSON.stringify(defaultConfig, null, 2), 'utf8');
  console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config.json ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
}

let appConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));

// =====================================================
// MIGRATION SCRIPTS
// =====================================================

// Migration 1: ‡πÅ‡∏õ‡∏•‡∏á config ‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
if (appConfig.lineConfig && !appConfig.lineChannels) {
  console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á migrate config ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà...');
  const oldChannel = {
    id: 'channel-' + Date.now(),
    name: 'LINE OA ‡∏´‡∏•‡∏±‡∏Å',
    channelAccessToken: appConfig.lineConfig.channelAccessToken || '',
    channelSecret: appConfig.lineConfig.channelSecret || '',
    profilePictureUrl: '',
    enabled: true,
    features: {
      welcome: true,
      activities: true,
      promotions: true,
      flexMessages: true
    },
    createdAt: new Date().toISOString()
  };
  appConfig.lineChannels = [oldChannel];
  delete appConfig.lineConfig;
  fs.writeFileSync(configPath, JSON.stringify(appConfig, null, 2), 'utf8');
  console.log('‚úÖ Migration ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
}

// Migration 2: ‡πÄ‡∏û‡∏¥‡πà‡∏° features ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö channels ‡πÄ‡∏Å‡πà‡∏≤
let needsSave = false;
if (appConfig.lineChannels) {
  appConfig.lineChannels.forEach(channel => {
    if (!channel.features) {
      channel.features = {
        welcome: true,
        activities: true,
        promotions: true,
        flexMessages: true
      };
      needsSave = true;
      console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° features ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö channel: ${channel.name}`);
    } else if (channel.features.welcome === undefined) {
      channel.features.welcome = true;
      needsSave = true;
      console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° welcome feature ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö channel: ${channel.name}`);
    }
  });
  
  if (needsSave) {
    fs.writeFileSync(configPath, JSON.stringify(appConfig, null, 2), 'utf8');
    console.log('‚úÖ Migration features ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    needsSave = false;
  }
}

// Migration 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á activities array ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if (!appConfig.activities) {
  console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á activities array...');
  appConfig.activities = [];
  
  if (appConfig.botSettings && appConfig.botSettings.activityMessage) {
    const defaultActivity = {
      id: 'activity-' + Date.now(),
      name: '‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å',
      enabled: true,
      useCooldown: true,
      allowSharedKeywords: true,
      message: appConfig.botSettings.activityMessage,
      cooldownMessage: appConfig.botSettings.cooldownMessage || "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ {timeLeft} ‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä",
      keywords: appConfig.botSettings.keywords || ["‡∏ü‡∏£‡∏µ", "free"],
      cooldownHours: appConfig.botSettings.cooldownHours || 2,
      channels: appConfig.lineChannels ? appConfig.lineChannels.map(ch => ch.id) : [],
      createdAt: new Date().toISOString()
    };
    appConfig.activities.push(defaultActivity);
    console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å botSettings');
  }
  
  fs.writeFileSync(configPath, JSON.stringify(appConfig, null, 2), 'utf8');
  console.log('‚úÖ Migration activities ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
}

// Migration 4: ‡πÄ‡∏û‡∏¥‡πà‡∏° useCooldown ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ
if (appConfig.activities) {
  appConfig.activities.forEach(activity => {
    if (activity.useCooldown === undefined) {
      activity.useCooldown = true;
      needsSave = true;
      console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° useCooldown ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: ${activity.name}`);
    }
  });
  
  if (needsSave) {
    fs.writeFileSync(configPath, JSON.stringify(appConfig, null, 2), 'utf8');
    console.log('‚úÖ Migration useCooldown ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    needsSave = false;
  }
}

// Migration 5: ‡πÄ‡∏û‡∏¥‡πà‡∏° allowSharedKeywords ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ
if (appConfig.activities) {
  appConfig.activities.forEach(activity => {
    if (activity.allowSharedKeywords === undefined) {
      activity.allowSharedKeywords = true;
      needsSave = true;
      console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° allowSharedKeywords ‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: ${activity.name}`);
    }
  });
  
  if (needsSave) {
    fs.writeFileSync(configPath, JSON.stringify(appConfig, null, 2), 'utf8');
    console.log('‚úÖ Migration allowSharedKeywords ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    needsSave = false;
  }
}

// Migration 6: ‡πÅ‡∏õ‡∏•‡∏á message ‡πÄ‡∏õ‡πá‡∏ô messageBoxes
if (appConfig.activities) {
  appConfig.activities.forEach(activity => {
    if (activity.message && !activity.messageBoxes) {
      activity.messageBoxes = [
        {
          type: 'text',
          content: activity.message,
          altText: ''
        }
      ];
      needsSave = true;
      console.log(`‚úÖ ‡πÅ‡∏õ‡∏•‡∏á message ‡πÄ‡∏õ‡πá‡∏ô messageBoxes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: ${activity.name}`);
    }
    else if (!activity.message && !activity.messageBoxes) {
      activity.messageBoxes = [];
      needsSave = true;
      console.log(`‚ö†Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á messageBoxes ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°: ${activity.name}`);
    }
  });
  
  if (needsSave) {
    fs.writeFileSync(configPath, JSON.stringify(appConfig, null, 2), 'utf8');
    console.log('‚úÖ Migration messageBoxes ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    needsSave = false;
  }
}

// =====================================================
// END MIGRATION SCRIPTS
// =====================================================

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å config
function saveConfig() {
  fs.writeFileSync(configPath, JSON.stringify(appConfig, null, 2), 'utf8');
}

// LINE Bot Configuration
global.lineChannels = appConfig.lineChannels || [];
global.lineClients = new Map();
global.isLineConfigured = false;

// ‡∏™‡∏£‡πâ‡∏≤‡∏á LINE clients ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å channel ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
function initializeLineClients() {
  global.lineClients.clear();
  let configuredCount = 0;
  
  global.lineChannels.forEach(channel => {
    if (channel.enabled && channel.channelAccessToken && channel.channelSecret) {
      try {
        const client = new line.messagingApi.MessagingApiClient({
          channelAccessToken: channel.channelAccessToken
        });
        global.lineClients.set(channel.id, {
          client: client,
          channelSecret: channel.channelSecret,
          config: channel
        });
        configuredCount++;
        console.log(`‚úÖ LINE Bot configured: ${channel.name} (ID: ${channel.id})`);
      } catch (error) {
        console.log(`‚ö†Ô∏è Failed to configure ${channel.name}:`, error.message);
      }
    }
  });
  
  global.isLineConfigured = configuredCount > 0;
  return configuredCount;
}

// Initialize LINE clients
const configuredChannels = initializeLineClients();
console.log(`üì± Configured ${configuredChannels} LINE channel(s)`);

// ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ User
const userMessageHistory = new Map();

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Express
app.set('view engine', 'ejs');
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));
app.use(cookieParser());

// Session Configuration
app.use(session({
  secret: process.env.SESSION_SECRET || 'change-this-secret-key-to-random-string',
  resave: false,
  saveUninitialized: false,
  cookie: { 
    secure: false,
    maxAge: 24 * 60 * 60 * 1000
  }
}));

// ‡πÇ‡∏´‡∏•‡∏î Routes
const { router: authRouter, requireLogin } = require('./routes/auth');
const { setupDashboardRoute } = require('./routes/dashboard');
const { setupActivitiesRoutes } = require('./routes/activities');
const { setupPromotionsRoutes, containsPromotionKeyword, createPromotionFlexMessage, promotionsConfig } = require('./routes/promotions');
const { setupSettingsRoutes } = require('./routes/settings');
const { 
  setupFlexRoutes, 
  getRandomFlex, 
  getQuickReplyMenu,
  containsQuickReplyKeyword,
  containsFlexKeyword,
  quickReplyConfig
} = require('./routes/flexMessages');
const { 
  setupWelcomeRoutes, 
  createWelcomeFlexMessage, 
  welcomeConfig 
} = require('./routes/welcome');
const { 
  setupLiffRoutes,
  liffConfig
} = require('./routes/liff');
const { setupBroadcastRoutes } = require('./routes/broadcast');
const { setupWebhookRoute } = require('./routes/webhook');

// ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Routes
app.use('/', authRouter);
app.use('/', setupDashboardRoute(requireLogin, appConfig, userMessageHistory, promotionsConfig));
app.use('/', setupWelcomeRoutes(requireLogin));
app.use('/', setupActivitiesRoutes(requireLogin, appConfig, userMessageHistory, saveConfig));
app.use('/', setupPromotionsRoutes(requireLogin));
app.use('/', setupFlexRoutes(requireLogin));
app.use('/', setupLiffRoutes(requireLogin));
app.use('/', setupBroadcastRoutes(requireLogin, appConfig));
app.use('/', setupSettingsRoutes(requireLogin, appConfig, saveConfig, userMessageHistory, initializeLineClients));
app.use('/', setupWebhookRoute(
  appConfig, 
  userMessageHistory, 
  containsPromotionKeyword, 
  createPromotionFlexMessage, 
  getRandomFlex, 
  getQuickReplyMenu,
  containsQuickReplyKeyword,
  containsFlexKeyword,
  quickReplyConfig,
  createWelcomeFlexMessage,
  welcomeConfig
));

// Health Check
app.get('/health', (req, res) => {
  const cooldownActivities = appConfig.activities ? appConfig.activities.filter(a => a.useCooldown !== false).length : 0;
  const noCooldownActivities = appConfig.activities ? appConfig.activities.filter(a => a.useCooldown === false).length : 0;
  const sharedKeywordsActivities = appConfig.activities ? appConfig.activities.filter(a => a.allowSharedKeywords !== false).length : 0;
  const noSharedKeywordsActivities = appConfig.activities ? appConfig.activities.filter(a => a.allowSharedKeywords === false).length : 0;
  const messageBoxesActivities = appConfig.activities ? appConfig.activities.filter(a => a.messageBoxes && a.messageBoxes.length > 0).length : 0;
  
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    activeUsers: userMessageHistory.size,
    lineConfigured: global.isLineConfigured,
    configuredChannels: global.lineClients.size,
    totalActivities: appConfig.activities ? appConfig.activities.length : 0,
    enabledActivities: appConfig.activities ? appConfig.activities.filter(a => a.enabled).length : 0,
    cooldownActivities: cooldownActivities,
    noCooldownActivities: noCooldownActivities,
    sharedKeywordsActivities: sharedKeywordsActivities,
    noSharedKeywordsActivities: noSharedKeywordsActivities,
    messageBoxesActivities: messageBoxesActivities,
    flexEnabled: quickReplyConfig.flexMessageSettings.enabled,
    quickReplyEnabled: quickReplyConfig.quickReplySettings.enabled,
    welcomeEnabled: welcomeConfig.welcomeSettings.enabled,
    liffEnabled: liffConfig.liffSettings.enabled,
    version: '4.1'
  });
});

// Start Server
const PORT = process.env.PORT || 3000;
const DOMAIN = process.env.DOMAIN;

app.listen(PORT, () => {
  console.log('='.repeat(70));
  console.log('üöÄ LINE OA Bot Server Started! (Version 4.1 - Broadcast System)');
  console.log('='.repeat(70));
  console.log(`üì° Server running on port ${PORT}`);

  if (DOMAIN) {
    const protocol = DOMAIN.includes('localhost') ? 'http' : 'https';
    console.log(`üîó Webhook URL: ${protocol}://${DOMAIN}/webhook`);
    console.log(`üì§ LIFF Share URL: ${protocol}://${DOMAIN}/liff/share`);
  } else {
    console.log(`üîó Webhook URL: http://localhost:${PORT}/webhook`);
    console.log(`üì§ LIFF Share URL: http://localhost:${PORT}/liff/share`);
    console.log(`‚ö†Ô∏è  ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ DOMAIN ‡πÉ‡∏ô .env ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Production`);
  }

  console.log(`\nüìç URLs:`);
  console.log(`üîê Login:          http://localhost:${PORT}/login`);
  console.log(`üìä Dashboard:      http://localhost:${PORT}/`);
  console.log(`üëã Welcome:        http://localhost:${PORT}/welcome`);
  console.log(`üéÅ Activities:     http://localhost:${PORT}/activities`);
  console.log(`üé® Promotions:     http://localhost:${PORT}/promotions`);
  console.log(`üí¨ Flex Messages:  http://localhost:${PORT}/flex-messages`);
  console.log(`üì¢ Broadcast:      http://localhost:${PORT}/broadcast`);
  console.log(`üì§ LIFF Share:     http://localhost:${PORT}/liff`);
  console.log(`‚öôÔ∏è  Settings:       http://localhost:${PORT}/settings`);
  console.log('='.repeat(70));
  console.log(`ü§ñ LINE Channels:  ${global.lineClients.size} configured`);
  console.log(`üéÅ Activities:     ${appConfig.activities ? appConfig.activities.length : 0} total, ${appConfig.activities ? appConfig.activities.filter(a => a.enabled).length : 0} enabled`);
  
  const cooldownCount = appConfig.activities ? appConfig.activities.filter(a => a.useCooldown !== false).length : 0;
  const noCooldownCount = appConfig.activities ? appConfig.activities.filter(a => a.useCooldown === false).length : 0;
  const sharedCount = appConfig.activities ? appConfig.activities.filter(a => a.allowSharedKeywords !== false).length : 0;
  const noSharedCount = appConfig.activities ? appConfig.activities.filter(a => a.allowSharedKeywords === false).length : 0;
  const messageBoxesCount = appConfig.activities ? appConfig.activities.filter(a => a.messageBoxes && a.messageBoxes.length > 0).length : 0;
  
  console.log(`   ‚è±Ô∏è  With Cooldown: ${cooldownCount}`);
  console.log(`   üöÄ No Cooldown: ${noCooldownCount}`);
  console.log(`   üîó Shared Keywords Allowed: ${sharedCount}`);
  console.log(`   üîí Shared Keywords Blocked: ${noSharedCount}`);
  console.log(`   üì¶ Using MessageBoxes: ${messageBoxesCount}`);
  
  console.log(`üëã Welcome Message: ${welcomeConfig.welcomeSettings.enabled ? '‚úÖ Enabled' : '‚ùå Disabled'}`);
  console.log(`üí¨ Flex Messages:  ${quickReplyConfig.flexMessageSettings.enabled ? '‚úÖ Enabled' : '‚ùå Disabled'}`);
  console.log(`üîò Quick Reply:    ${quickReplyConfig.quickReplySettings.enabled ? '‚úÖ Enabled' : '‚ùå Disabled'}`);
  console.log(`üì§ LIFF Share:     ${liffConfig.liffSettings.enabled ? '‚úÖ Enabled' : '‚ùå Disabled'}`);
  console.log(`üì¢ Broadcast:      ‚úÖ Enabled`);
  console.log('='.repeat(70));
  
  if (global.lineClients.size === 0) {
    console.log('‚ö†Ô∏è  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Settings ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° LINE Channel');
    console.log(`   üëâ http://localhost:${PORT}/settings`);
  } else {
    console.log('üì± Configured LINE Channels:');
    global.lineChannels.forEach(channel => {
      if (channel.enabled) {
        const features = [];
        if (channel.features?.welcome) features.push('Welcome');
        if (channel.features?.activities) features.push('Activities');
        if (channel.features?.promotions) features.push('Promotions');
        if (channel.features?.flexMessages) features.push('Flex');
        console.log(`   ‚úÖ ${channel.name} [${features.join(', ')}]`);
      }
    });
  }
  
  if (appConfig.activities && appConfig.activities.length > 0) {
    console.log('\nüéÅ Configured Activities:');
    appConfig.activities.forEach(activity => {
      if (activity.enabled) {
        const cooldownStatus = activity.useCooldown !== false ? `‚è±Ô∏è  ${activity.cooldownHours}h` : 'üöÄ No limit';
        const sharedStatus = activity.allowSharedKeywords !== false ? 'üîó Shared‚úÖ' : 'üîí Shared‚ùå';
        const messageType = activity.messageBoxes ? `üì¶ ${activity.messageBoxes.length} boxes` : 'üìù Text';
        const channelNames = activity.channels ? activity.channels.map(cid => {
          const ch = appConfig.lineChannels.find(c => c.id === cid);
          return ch ? ch.name : 'Unknown';
        }).join(', ') : 'None';
        console.log(`   ‚úÖ ${activity.name} [${cooldownStatus}, ${sharedStatus}, ${messageType}]`);
        console.log(`      Keywords: ${activity.keywords.join(', ')}`);
        console.log(`      Channels: ${channelNames}`);
      }
    });
  }
  
  console.log('\nüí° Features:');
  console.log('   ‚úÖ Multi-Channel: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ LINE OA');
  console.log('   ‚úÖ Multi-Activities: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡πÅ‡∏¢‡∏Å keyword, cooldown, channels');
  console.log('   ‚úÖ Multi-Message Types: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°, ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û, Flex Message ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö');
  console.log('   ‚úÖ Message Ordering: ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ');
  console.log('   ‚úÖ Cooldown Toggle: ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Cooldown ‡πÅ‡∏¢‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°');
  console.log('   ‚úÖ Shared Keywords: ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï/‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏ã‡πâ‡∏≥‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°');
  console.log('   ‚úÖ Feature Control: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Channel');
  console.log('   ‚úÖ Welcome Message: ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥');
  console.log('   ‚úÖ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ä‡∏£‡πå: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞ Cooldown ‡πÅ‡∏¢‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°');
  console.log('   ‚úÖ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô: ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Messages ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°');
  console.log('   ‚úÖ Flex Messages: ‡∏™‡∏∏‡πà‡∏°‡∏™‡πà‡∏á Flex + ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô Dashboard');
  console.log('   ‚úÖ Quick Reply: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö');
  console.log('   ‚úÖ LIFF Share: ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ä‡∏£‡πå LINE LIFF ‡∏û‡∏£‡πâ‡∏≠‡∏° Carousel');
  console.log('   ‚úÖ Broadcast: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö Broadcast ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤');
  
  console.log('\n');
});