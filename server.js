require('dotenv').config();
const express = require('express');
const line = require('@line/bot-sdk');
const session = require('express-session');
const cookieParser = require('cookie-parser');
const bcrypt = require('bcryptjs');
const fs = require('fs');
const path = require('path');
const app = express();

// ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å config.json
const configPath = path.join(__dirname, 'config.json');

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config.json ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if (!fs.existsSync(configPath)) {
  const defaultConfig = {
    lineConfig: {
      channelAccessToken: "",
      channelSecret: ""
    },
    botSettings: {
      activityMessage: "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏ü‡∏£‡∏µ 100\n‡πÅ‡∏ä‡∏£‡πå‡πÇ‡∏û‡∏™‡∏•‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 6 ‡∏Å‡∏•‡∏∏‡πà‡∏° Facebook ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‡∏™‡∏•‡πá‡∏≠‡∏ï ‡∏Å‡∏≤‡∏£‡∏û‡∏ô‡∏±‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏´‡πâ‡∏≤‡∏°‡∏ã‡πâ‡∏≥)\nüî∑ https://9iot.cc/w99\n‡∏Å‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° üéØ ‡∏Å‡∏î‡∏ñ‡∏π‡∏Å‡πÉ‡∏à ‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞\nüíû‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏Ñ‡∏õ‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≠‡∏á‡πÅ‡∏≠‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞\n(‡∏´‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° 4 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Ç‡∏≠‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏ô‡∏∞‡∏Ñ‡∏∞)",
      cooldownMessage: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ {timeLeft} ‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä",
      keywords: ["‡∏ü‡∏£‡∏µ", "free", "‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ü‡∏£‡∏µ", "‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï", "‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï"],
      cooldownHours: 2
    }
  };
  fs.writeFileSync(configPath, JSON.stringify(defaultConfig, null, 2), 'utf8');
  console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config.json ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
}

let appConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å config
function saveConfig() {
  fs.writeFileSync(configPath, JSON.stringify(appConfig, null, 2), 'utf8');
}

// LINE Bot Configuration
let config = {
  channelAccessToken: appConfig.lineConfig.channelAccessToken || 'dummy_token',
  channelSecret: appConfig.lineConfig.channelSecret || 'dummy_secret'
};

let client;
let isLineConfigured = false;

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
if (appConfig.lineConfig.channelAccessToken && appConfig.lineConfig.channelSecret) {
  try {
    client = new line.messagingApi.MessagingApiClient({
      channelAccessToken: appConfig.lineConfig.channelAccessToken
    });
    isLineConfigured = true;
    console.log('‚úÖ LINE Bot configured successfully');
  } catch (error) {
    console.log('‚ö†Ô∏è LINE Bot configuration failed:', error.message);
  }
}

// ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ User
const userMessageHistory = new Map();

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ Cooldown
function getCooldownPeriod() {
  return appConfig.botSettings.cooldownHours * 60 * 60 * 1000;
}

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Express
app.set('view engine', 'ejs');
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));
app.use(cookieParser());

// Session Configuration
app.use(session({
  secret: process.env.SESSION_SECRET || 'change-this-secret-key-to-random-string',
  resave: false,
  saveUninitialized: false,
  cookie: { 
    secure: false, // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô true ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ HTTPS
    maxAge: 24 * 60 * 60 * 1000 // 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  }
}));

// Middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Login
function requireLogin(req, res, next) {
  if (req.session && req.session.isLoggedIn) {
    next();
  } else {
    res.redirect('/login');
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏µ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
function containsKeyword(text) {
  if (!text) return false;
  const lowerText = text.toLowerCase();
  return appConfig.botSettings.keywords.some(keyword => 
    lowerText.includes(keyword.toLowerCase())
  );
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
function canSendMessage(userId) {
  const lastSentTime = userMessageHistory.get(userId);
  if (!lastSentTime) return true;
  
  const currentTime = Date.now();
  const timeDiff = currentTime - lastSentTime;
  return timeDiff >= getCooldownPeriod();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
function recordMessageSent(userId) {
  userMessageHistory.set(userId, Date.now());
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
function getRemainingTime(userId) {
  const lastSentTime = userMessageHistory.get(userId);
  if (!lastSentTime) return 0;
  
  const currentTime = Date.now();
  const timeDiff = currentTime - lastSentTime;
  const remaining = getCooldownPeriod() - timeDiff;
  
  return remaining > 0 ? remaining : 0;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏ó‡∏µ
function formatTime(milliseconds) {
  const hours = Math.floor(milliseconds / (1000 * 60 * 60));
  const minutes = Math.floor((milliseconds % (1000 * 60 * 60)) / (1000 * 60));
  return `${hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ${minutes} ‡∏ô‡∏≤‡∏ó‡∏µ`;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Cooldown ‡∏û‡∏£‡πâ‡∏≠‡∏° placeholder
function getCooldownMessage(userId) {
  const remaining = getRemainingTime(userId);
  const timeLeft = formatTime(remaining);
  const template = appConfig.botSettings.cooldownMessage || "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ {timeLeft} ‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä";
  return template.replace('{timeLeft}', timeLeft);
}

// ===================== ROUTES =====================

// Login Page
app.get('/login', (req, res) => {
  if (req.session && req.session.isLoggedIn) {
    return res.redirect('/');
  }
  res.render('login', { error: null });
});

// Login Handler
app.post('/login', async (req, res) => {
  const { username, password } = req.body;
  
  const adminUsername = process.env.ADMIN_USERNAME || 'jonz';
  const adminPasswordHash = process.env.ADMIN_PASSWORD_HASH;
  
  if (!adminPasswordHash) {
    return res.render('login', { 
      error: '‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ADMIN_PASSWORD_HASH ‡πÉ‡∏ô .env' 
    });
  }
  
  if (username === adminUsername && bcrypt.compareSync(password, adminPasswordHash)) {
    req.session.isLoggedIn = true;
    req.session.username = username;
    res.redirect('/');
  } else {
    res.render('login', { error: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
  }
});

// Logout
app.get('/logout', (req, res) => {
  req.session.destroy();
  res.redirect('/login');
});

// Dashboard
app.get('/', requireLogin, (req, res) => {
  const users = Array.from(userMessageHistory.entries()).map(([userId, timestamp]) => {
    const date = new Date(timestamp);
    const remaining = getRemainingTime(userId);
    const canSend = remaining === 0;
    
    return {
      userId,
      lastSent: date.toLocaleString('th-TH'),
      canSend,
      remainingTime: canSend ? '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ' : formatTime(remaining)
    };
  });
  
  res.render('dashboard', { 
    users,
    totalUsers: users.length,
    activityMessage: appConfig.botSettings.activityMessage,
    cooldownMessage: appConfig.botSettings.cooldownMessage || "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ {timeLeft} ‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä",
    keywords: appConfig.botSettings.keywords.join(', '),
    cooldownHours: appConfig.botSettings.cooldownHours,
    lineAccessToken: appConfig.lineConfig.channelAccessToken,
    lineChannelSecret: appConfig.lineConfig.channelSecret,
    username: req.session.username
  });
});

// Update Settings
app.post('/update-settings', requireLogin, (req, res) => {
  try {
    const { activityMessage, cooldownMessage, keywords, cooldownHours, lineAccessToken, lineChannelSecret } = req.body;
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    appConfig.botSettings.activityMessage = activityMessage;
    appConfig.botSettings.cooldownMessage = cooldownMessage || "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ {timeLeft} ‡∏Å‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏£‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä";
    appConfig.botSettings.keywords = keywords.split(',').map(k => k.trim()).filter(k => k);
    appConfig.botSettings.cooldownHours = parseFloat(cooldownHours) || 2;
    appConfig.lineConfig.channelAccessToken = lineAccessToken || '';
    appConfig.lineConfig.channelSecret = lineChannelSecret || '';
    
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á config.json
    saveConfig();
    
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó LINE Client
    if (lineAccessToken && lineChannelSecret) {
      config = {
        channelAccessToken: lineAccessToken,
        channelSecret: lineChannelSecret
      };
      try {
        client = new line.messagingApi.MessagingApiClient({
          channelAccessToken: lineAccessToken
        });
        isLineConfigured = true;
        console.log('‚úÖ LINE Bot reconfigured successfully');
      } catch (error) {
        console.error('‚ùå Failed to configure LINE Bot:', error.message);
        isLineConfigured = false;
      }
    }
    
    res.json({ success: true, message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (error) {
    console.error('Error updating settings:', error);
    res.status(500).json({ success: false, message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' });
  }
});

// Webhook Endpoint - ‡πÉ‡∏ä‡πâ custom middleware ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ config
app.post('/webhook', express.json(), async (req, res) => {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (!isLineConfigured) {
      console.log('‚ö†Ô∏è Webhook received but LINE is not configured yet');
      return res.status(200).send('LINE not configured');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö signature
    const signature = req.get('x-line-signature');
    if (!signature) {
      return res.status(401).send('No signature');
    }

    // Verify signature
    const crypto = require('crypto');
    const body = JSON.stringify(req.body);
    const hash = crypto
      .createHmac('SHA256', config.channelSecret)
      .update(body)
      .digest('base64');

    if (hash !== signature) {
      console.log('‚ùå Invalid signature');
      return res.status(401).send('Invalid signature');
    }

    const events = req.body.events;
    await Promise.all(events.map(handleEvent));
    
    res.status(200).send('OK');
  } catch (err) {
    console.error('Error in webhook:', err);
    res.status(500).send('Internal Server Error');
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Event
async function handleEvent(event) {
  if (event.type !== 'message' || event.message.type !== 'text') {
    return null;
  }
  
  if (!client || !isLineConfigured) {
    console.error('LINE client not initialized');
    return null;
  }
  
  const userId = event.source.userId;
  const messageText = event.message.text;
  
  console.log(`Received message from ${userId}: ${messageText}`);
  
  if (containsKeyword(messageText)) {
    console.log('Keyword detected!');
    
    if (canSendMessage(userId)) {
      await client.replyMessage({
        replyToken: event.replyToken,
        messages: [
          {
            type: 'text',
            text: appConfig.botSettings.activityMessage
          }
        ]
      });
      
      recordMessageSent(userId);
      console.log(`Activity sent to ${userId}`);
    } else {
      const cooldownMsg = getCooldownMessage(userId);
      
      await client.replyMessage({
        replyToken: event.replyToken,
        messages: [
          {
            type: 'text',
            text: cooldownMsg
          }
        ]
      });
      
      const remaining = getRemainingTime(userId);
      const timeLeft = formatTime(remaining);
      console.log(`Cooldown active for ${userId}, ${timeLeft} remaining`);
    }
  }
  
  return null;
}

// Health Check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    activeUsers: userMessageHistory.size,
    lineConfigured: isLineConfigured
  });
});

// Start Server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log('='.repeat(50));
  console.log('üöÄ LINE OA Bot Server Started!');
  console.log('='.repeat(50));
  console.log(`üì° Server running on port ${PORT}`);
  console.log(`üîê Login: http://localhost:${PORT}/login`);
  console.log(`üìä Dashboard: http://localhost:${PORT}`);
  console.log(`üîó Webhook URL: http://localhost:${PORT}/webhook`);
  console.log(`ü§ñ LINE Bot: ${isLineConfigured ? '‚úÖ Configured' : '‚ö†Ô∏è Not Configured Yet'}`);
  console.log('='.repeat(50));
  
  if (!isLineConfigured) {
    console.log('‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Channel Access Token ‡πÅ‡∏•‡∏∞ Channel Secret ‡πÉ‡∏ô Dashboard');
  }
});