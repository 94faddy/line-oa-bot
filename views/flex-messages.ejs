<%- include('partials/header', {
    title: 'Flex Messages',
    pageIcon: 'üí¨',
    pageTitle: 'Flex Messages & Quick Reply',
    pageSubtitle: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Flex Messages, Quick Reply ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î',
    username: username,
    activePage: 'flex-messages'
}) %>

<style>
    .flex-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .flex-card {
        background: white;
        border: 2px solid #e0e0e0;
        border-radius: 15px;
        overflow: hidden;
        transition: all 0.3s;
        position: relative;
    }

    .flex-card:hover {
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
        transform: translateY(-5px);
        border-color: #667eea;
    }

    .flex-card-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        font-size: 1.1em;
        font-weight: bold;
    }

    .flex-card-body {
        padding: 20px;
    }

    .flex-info {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
        font-size: 0.9em;
        color: #666;
    }

    .flex-actions {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 10px;
        margin-top: 15px;
    }

    .flex-actions button {
        padding: 10px;
        font-size: 0.9em;
    }

    .json-editor {
        width: 100%;
        min-height: 400px;
        font-family: 'Courier New', monospace;
        font-size: 0.9em;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        padding: 15px;
        resize: vertical;
    }

    .json-editor:focus {
        outline: none;
        border-color: #667eea;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        animation: fadeIn 0.3s;
        overflow-y: auto;
    }

    .modal-content {
        background-color: white;
        margin: 2% auto;
        padding: 0;
        border-radius: 15px;
        width: 90%;
        max-width: 900px;
        animation: slideDown 0.3s;
        max-height: 90vh;
        display: flex;
        flex-direction: column;
    }

    .modal-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        border-radius: 15px 15px 0 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-header h2 {
        margin: 0;
        border: none;
        padding: 0;
    }

    .close {
        color: white;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        background: none;
        border: none;
        padding: 0;
        line-height: 1;
    }

    .close:hover {
        opacity: 0.8;
    }

    .modal-body {
        padding: 30px;
        overflow-y: auto;
        flex: 1;
    }

    .preview-container {
        background: #f8f9fa;
        border: 2px solid #e0e0e0;
        border-radius: 10px;
        padding: 20px;
        margin-top: 20px;
        max-height: 400px;
        overflow-y: auto;
    }

    .button-card {
        background: white;
        border: 2px solid #e0e0e0;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 15px;
        transition: all 0.3s;
        position: relative;
        user-select: none;
    }

    .button-card[draggable="true"] {
        cursor: move;
    }

    .button-card:hover {
        border-color: #667eea;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .button-card.dragging {
        opacity: 0.5;
        transform: scale(0.95);
    }

    .button-card.drag-over {
        border-color: #28a745;
        border-style: dashed;
        background: #f0fff4;
    }

    .button-card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .button-card-title {
        display: flex;
        align-items: center;
        gap: 10px;
        flex: 1;
    }

    .drag-handle {
        cursor: grab;
        padding: 5px 10px;
        color: #999;
        font-size: 1.2em;
        user-select: none;
    }

    .drag-handle:active {
        cursor: grabbing;
    }

    .order-badge {
        background: #667eea;
        color: white;
        padding: 3px 10px;
        border-radius: 15px;
        font-size: 0.85em;
        font-weight: bold;
    }

    .button-preview {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 10px;
        background: #f8f9fa;
        border-radius: 8px;
        margin: 10px 0;
    }

    .button-preview img {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
    }

    .toggle-switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 30px;
    }

    .toggle-switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: 0.4s;
        border-radius: 30px;
    }

    .slider:before {
        position: absolute;
        content: "";
        height: 22px;
        width: 22px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: 0.4s;
        border-radius: 50%;
    }

    input:checked + .slider {
        background-color: #28a745;
    }

    input:checked + .slider:before {
        transform: translateX(30px);
    }

    .tab-buttons {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
        border-bottom: 2px solid #e0e0e0;
    }

    .tab-button {
        padding: 12px 24px;
        background: none;
        border: none;
        border-bottom: 3px solid transparent;
        cursor: pointer;
        font-size: 1em;
        font-weight: 600;
        color: #666;
        transition: all 0.3s;
    }

    .tab-button:hover {
        color: #667eea;
    }

    .tab-button.active {
        color: #667eea;
        border-bottom-color: #667eea;
    }

    .tab-content {
        display: none;
    }

    .tab-content.active {
        display: block;
    }

    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @keyframes slideDown {
        from {
            transform: translateY(-50px);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    @media (max-width: 768px) {
        .flex-grid {
            grid-template-columns: 1fr;
        }

        .modal-content {
            width: 95%;
            margin: 5% auto;
        }

        .flex-actions {
            grid-template-columns: 1fr;
        }

        .tab-buttons {
            overflow-x: auto;
        }
    }
</style>

<!-- Stats -->
<div class="stats">
    <div class="stat-card">
        <div class="icon">üìÑ</div>
        <h3>Flex Files</h3>
        <div class="value"><%= totalFiles %></div>
    </div>

    <div class="stat-card">
        <div class="icon">üîò</div>
        <h3>Quick Reply ‡∏õ‡∏∏‡πà‡∏°</h3>
        <div class="value"><%= quickReplyConfig.quickReplyButtons.length %></div>
    </div>

    <div class="stat-card">
        <div class="icon">üîë</div>
        <h3>Flex Keywords</h3>
        <div class="value"><%= quickReplyConfig.flexMessageSettings.keywords.length %></div>
    </div>

    <div class="stat-card">
        <div class="icon">‚ö°</div>
        <h3>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</h3>
        <div class="value">
            <%= quickReplyConfig.quickReplySettings.enabled && quickReplyConfig.flexMessageSettings.enabled ? '‡πÄ‡∏õ‡∏¥‡∏î' : '‡∏õ‡∏¥‡∏î' %>
        </div>
    </div>
</div>

<!-- Tabs -->
<div class="section">
    <div class="tab-buttons">
        <button class="tab-button active" onclick="switchTab('flex')">üìÑ Flex Messages</button>
        <button class="tab-button" onclick="switchTab('quickreply')">üîò Quick Reply</button>
        <button class="tab-button" onclick="switchTab('keywords')">üîë ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î</button>
    </div>

    <!-- Tab 1: Flex Messages -->
    <div id="tab-flex" class="tab-content active">
        <h2>
            üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Flex Messages
            <button class="btn btn-success" onclick="openAddModal()">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° Flex</button>
        </h2>

        <% if (flexFiles.length === 0) { %>
            <div class="empty-state">
                <div class="icon">üì≠</div>
                <h3>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Flex Message</h3>
                <p>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏û‡∏¥‡πà‡∏° Flex" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á</p>
            </div>
        <% } else { %>
            <div class="flex-grid">
                <% flexFiles.forEach(function(file) { %>
                    <div class="flex-card">
                        <div class="flex-card-header">
                            üìÑ <%= file.filename %>
                        </div>
                        <div class="flex-card-body">
                            <div class="flex-info">
                                <span>üì¶ ‡∏Ç‡∏ô‡∏≤‡∏î:</span>
                                <strong><%= file.size %></strong>
                            </div>
                            <div class="flex-info">
                                <span>üïê ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:</span>
                                <strong><%= file.lastModified.split(' ')[0] %></strong>
                            </div>
                            <div class="flex-info">
                                <span>üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</span>
                                <strong><%= file.content.type || 'unknown' %></strong>
                            </div>

                            <div class="flex-actions">
                                <button class="btn btn-primary" onclick="viewFlex('<%= file.id %>')">üëÅÔ∏è ‡∏î‡∏π</button>
                                <button class="btn btn-warning" onclick="editFlex('<%= file.id %>')">‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
                                <button class="btn btn-success" onclick="testFlex('<%= file.id %>')">üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö</button>
                                <button class="btn btn-danger" onclick="deleteFlex('<%= file.id %>', '<%= file.filename %>')">üóëÔ∏è ‡∏•‡∏ö</button>
                            </div>
                        </div>
                    </div>
                <% }); %>
            </div>
        <% } %>
    </div>

    <!-- Tab 2: Quick Reply -->
    <div id="tab-quickreply" class="tab-content">
        <h2>
            üîò ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏∏‡πà‡∏° Quick Reply
            <button class="btn btn-success" onclick="openAddButtonModal()">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°</button>
        </h2>

        <div class="info-box" style="margin-bottom: 20px;">
            üí° <strong>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Quick Reply:</strong> "<%= quickReplyConfig.quickReplySettings.text %>"
            <button class="btn btn-primary" onclick="openQuickReplyTextModal()" style="margin-left: 10px;">‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
        </div>

        <div class="info-box" style="background: #e3f2fd; border-left: 4px solid #2196f3; margin-bottom: 20px;">
            üí° <strong>‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:</strong> ‡∏•‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö (‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏Å‡πà‡∏≠‡∏ô)
        </div>

        <% if (quickReplyConfig.quickReplyButtons.length === 0) { %>
            <div class="empty-state">
                <div class="icon">üì≠</div>
                <h3>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏° Quick Reply</h3>
                <p>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á</p>
            </div>
        <% } else { %>
            <div id="buttonsContainer">
                <% quickReplyConfig.quickReplyButtons.forEach(function(btn, index) { %>
                    <div class="button-card" draggable="true" data-id="<%= btn.id %>" data-order="<%= btn.order || index %>">
                        <div class="button-card-header">
                            <div class="button-card-title">
                                <span class="drag-handle">‚ãÆ‚ãÆ</span>
                                <span class="order-badge">#<%= index + 1 %></span>
                                <h3 style="margin: 0;">üîò <%= btn.label %></h3>
                            </div>
                            <label class="toggle-switch">
                                <input type="checkbox" <%= btn.enabled ? 'checked' : '' %> onchange="toggleButton('<%= btn.id %>', this.checked)">
                                <span class="slider"></span>
                            </label>
                        </div>

                        <div class="button-preview">
                            <% if (btn.imageUrl) { %>
                                <img src="<%= btn.imageUrl %>" alt="<%= btn.label %>" onerror="this.src='https://via.placeholder.com/40'">
                            <% } %>
                            <div>
                                <strong><%= btn.label %></strong><br>
                                <small style="color: #666;">
                                    <%= btn.type === 'uri' ? 'üîó ' + btn.uri : 'üí¨ ' + btn.text %>
                                </small>
                            </div>
                        </div>

                        <div style="display: flex; gap: 10px; margin-top: 10px;">
                            <button class="btn btn-warning" onclick="editButton('<%= JSON.stringify(btn).replace(/'/g, "\\'") %>')" style="flex: 1;">
                                ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                            </button>
                            <button class="btn btn-danger" onclick="deleteButton('<%= btn.id %>')" style="flex: 1;">
                                üóëÔ∏è ‡∏•‡∏ö
                            </button>
                        </div>
                    </div>
                <% }); %>
            </div>
        <% } %>
    </div>

    <!-- Tab 3: Keywords -->
    <div id="tab-keywords" class="tab-content">
        <h2>üîë ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î</h2>

        <!-- Quick Reply Keywords -->
        <div style="background: white; padding: 25px; border-radius: 15px; margin-bottom: 20px; border: 2px solid #e0e0e0;">
            <h3 style="color: #667eea; margin-bottom: 15px;">üîò ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î Quick Reply</h3>
            
            <div class="form-group">
                <label>
                    <input type="checkbox" id="qrEnabled" <%= quickReplyConfig.quickReplySettings.enabled ? 'checked' : '' %>>
                    ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Quick Reply
                </label>
            </div>

            <div class="form-group">
                <label for="qrKeywords">‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ)</label>
                <input type="text" id="qrKeywords" value="<%= quickReplyConfig.quickReplySettings.keywords.join(', ') %>" placeholder="‡πÄ‡∏°‡∏ô‡∏π, menu, ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏≠‡∏¢">
                <small>‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Quick Reply Menu</small>
            </div>

            <button class="btn btn-success" onclick="saveQuickReplySettings()">üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</button>
        </div>

        <!-- Flex Message Keywords -->
        <div style="background: white; padding: 25px; border-radius: 15px; border: 2px solid #e0e0e0;">
            <h3 style="color: #764ba2; margin-bottom: 15px;">üí¨ ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î Flex Messages</h3>
            
            <div class="form-group">
                <label>
                    <input type="checkbox" id="flexEnabled" <%= quickReplyConfig.flexMessageSettings.enabled ? 'checked' : '' %>>
                    ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Flex Messages
                </label>
            </div>

            <div class="form-group">
                <label for="flexKeywords">‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ)</label>
                <input type="text" id="flexKeywords" value="<%= quickReplyConfig.flexMessageSettings.keywords.join(', ') %>" placeholder="bonustime, ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ä‡∏ô‡∏∞, ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏Å‡∏°">
                <small>‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö Flex Message ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°</small>
            </div>

            <div class="form-group">
                <label>
                    <input type="checkbox" id="flexWithQR" <%= quickReplyConfig.flexMessageSettings.sendWithQuickReply ? 'checked' : '' %>>
                    ‡∏™‡πà‡∏á Quick Reply ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö Flex Message
                </label>
                <small>‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á Flex Message ‡πÅ‡∏•‡∏∞ Quick Reply Menu</small>
            </div>

            <button class="btn btn-success" onclick="saveFlexSettings()">üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</button>
        </div>
    </div>
</div>

<!-- Flex Modal -->
<div id="flexModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 id="modalTitle">üí¨ Flex Message</h2>
            <button class="close" onclick="closeModal()">&times;</button>
        </div>
        <div class="modal-body">
            <form id="flexForm">
                <input type="hidden" id="flexId">
                <div class="form-group">
                    <label for="flexContent">JSON Content</label>
                    <textarea id="flexContent" class="json-editor"></textarea>
                </div>

                <div style="display: flex; gap: 10px; margin-top: 20px;">
                    <button type="button" class="btn btn-success" onclick="saveFlex()" style="flex: 1;">üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                    <button type="button" class="btn btn-secondary" onclick="closeModal()" style="flex: 1;">‚ùå ‡∏õ‡∏¥‡∏î</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Add Flex Modal -->
<div id="addModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° Flex Message</h2>
            <button class="close" onclick="closeAddModal()">&times;</button>
        </div>
        <div class="modal-body">
            <form id="addFlexForm">
                <div class="form-group">
                    <label for="newFlexName">‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå</label>
                    <input type="text" id="newFlexName" placeholder="flex_7" required>
                </div>
                <div class="form-group">
                    <label for="newFlexContent">JSON Content</label>
                    <textarea id="newFlexContent" class="json-editor"></textarea>
                </div>
                <div style="display: flex; gap: 10px; margin-top: 20px;">
                    <button type="submit" class="btn btn-success" style="flex: 1;">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°</button>
                    <button type="button" class="btn btn-secondary" onclick="closeAddModal()" style="flex: 1;">‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Add/Edit Button Modal -->
<div id="buttonModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 id="buttonModalTitle">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° Quick Reply</h2>
            <button class="close" onclick="closeButtonModal()">&times;</button>
        </div>
        <div class="modal-body">
            <form id="buttonForm">
                <input type="hidden" id="buttonId">
                
                <div class="form-group">
                    <label for="buttonType">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏∏‡πà‡∏°</label>
                    <select id="buttonType" onchange="toggleButtonFields()">
                        <option value="uri">‡πÄ‡∏õ‡∏¥‡∏î URL</option>
                        <option value="message">‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="buttonLabel">‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô‡∏õ‡∏∏‡πà‡∏°</label>
                    <input type="text" id="buttonLabel" placeholder="‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å" required>
                </div>

                <div class="form-group">
                    <label for="buttonImage">URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)</label>
                    <input type="url" id="buttonImage" placeholder="https://...">
                </div>

                <div class="form-group" id="uriField">
                    <label for="buttonUri">URL ‡∏•‡∏¥‡∏á‡∏Å‡πå</label>
                    <input type="url" id="buttonUri" placeholder="https://m.w99.in/register">
                </div>

                <div class="form-group hidden" id="textField">
                    <label for="buttonText">‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á</label>
                    <input type="text" id="buttonText" placeholder="bonustime">
                </div>

                <div style="display: flex; gap: 10px; margin-top: 20px;">
                    <button type="submit" class="btn btn-success" style="flex: 1;">üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                    <button type="button" class="btn btn-secondary" onclick="closeButtonModal()" style="flex: 1;">‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Quick Reply Text Modal -->
<div id="qrTextModal" class="modal">
    <div class="modal-content" style="max-width: 600px;">
        <div class="modal-header">
            <h2>‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Quick Reply</h2>
            <button class="close" onclick="closeQRTextModal()">&times;</button>
        </div>
        <div class="modal-body">
            <form id="qrTextForm">
                <div class="form-group">
                    <label for="qrText">‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Quick Reply</label>
                    <input type="text" id="qrText" value="<%= quickReplyConfig.quickReplySettings.text %>" placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞" required>
                    <small>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏õ‡∏∏‡πà‡∏° Quick Reply</small>
                </div>

                <div style="display: flex; gap: 10px; margin-top: 20px;">
                    <button type="submit" class="btn btn-success" style="flex: 1;">üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                    <button type="button" class="btn btn-secondary" onclick="closeQRTextModal()" style="flex: 1;">‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    let currentFlexId = null;
    let isViewMode = false;
    let isEditButton = false;
    let draggedElement = null;

    // ========== Drag and Drop System for Quick Reply ==========
    function initDragAndDrop() {
        const container = document.getElementById('buttonsContainer');
        if (!container) return;

        const cards = container.querySelectorAll('.button-card');
        
        cards.forEach(card => {
            // ‡∏•‡∏ö event listeners ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô duplicate)
            card.removeEventListener('dragstart', handleDragStart);
            card.removeEventListener('dragend', handleDragEnd);
            card.removeEventListener('dragover', handleDragOver);
            card.removeEventListener('drop', handleDrop);
            card.removeEventListener('dragenter', handleDragEnter);
            card.removeEventListener('dragleave', handleDragLeave);
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listeners ‡πÉ‡∏´‡∏°‡πà
            card.addEventListener('dragstart', handleDragStart);
            card.addEventListener('dragend', handleDragEnd);
            card.addEventListener('dragover', handleDragOver);
            card.addEventListener('drop', handleDrop);
            card.addEventListener('dragenter', handleDragEnter);
            card.addEventListener('dragleave', handleDragLeave);
            
            // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ drag ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏°
            const buttons = card.querySelectorAll('button, input, select, textarea');
            buttons.forEach(btn => {
                btn.addEventListener('mousedown', (e) => {
                    e.stopPropagation();
                });
            });
        });
    }

    function handleDragStart(e) {
        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ drag ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏°
        if (e.target.tagName === 'BUTTON' || e.target.tagName === 'INPUT' || e.target.tagName === 'LABEL') {
            e.preventDefault();
            return false;
        }
        
        draggedElement = this;
        this.classList.add('dragging');
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/plain', this.dataset.id);
        
        // ‡∏•‡∏î opacity ‡∏Ç‡∏≠‡∏á element ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≤‡∏Å
        setTimeout(() => {
            this.style.opacity = '0.5';
        }, 0);
    }

    function handleDragEnd(e) {
        // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ opacity
        this.style.opacity = '1';
        this.classList.remove('dragging');
        
        // ‡∏•‡∏ö class drag-over ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å card
        document.querySelectorAll('.button-card').forEach(card => {
            card.classList.remove('drag-over');
        });
        
        draggedElement = null;
    }

    function handleDragOver(e) {
        e.preventDefault();
        e.stopPropagation();
        
        if (this === draggedElement) {
            return false;
        }
        
        e.dataTransfer.dropEffect = 'move';
        return false;
    }

    function handleDragEnter(e) {
        e.preventDefault();
        if (this !== draggedElement && draggedElement) {
            this.classList.add('drag-over');
        }
    }

    function handleDragLeave(e) {
        e.preventDefault();
        this.classList.remove('drag-over');
    }

    function handleDrop(e) {
        e.preventDefault();
        e.stopPropagation();
        
        this.classList.remove('drag-over');
        
        if (!draggedElement || draggedElement === this) {
            return false;
        }
        
        const container = document.getElementById('buttonsContainer');
        const allCards = [...container.querySelectorAll('.button-card')];
        const draggedIndex = allCards.indexOf(draggedElement);
        const targetIndex = allCards.indexOf(this);
        
        if (draggedIndex !== -1 && targetIndex !== -1) {
            if (draggedIndex < targetIndex) {
                this.parentNode.insertBefore(draggedElement, this.nextSibling);
            } else {
                this.parentNode.insertBefore(draggedElement, this);
            }
            
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
            saveNewOrder();
        }
        
        return false;
    }

    async function saveNewOrder() {
        const container = document.getElementById('buttonsContainer');
        const cards = container.querySelectorAll('.button-card');
        const buttonIds = Array.from(cards).map(card => card.getAttribute('data-id'));
        
        try {
            const response = await fetch('/quickreply/reorder-buttons', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ buttonIds })
            });
            
            const result = await response.json();
            
            if (result.success) {
                // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö
                cards.forEach((card, index) => {
                    const badge = card.querySelector('.order-badge');
                    if (badge) {
                        badge.textContent = `#${index + 1}`;
                    }
                });
                
                showAlert('success', '‚úÖ ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            } else {
                showAlert('error', result.message);
                location.reload();
            }
        } catch (error) {
            showAlert('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
            location.reload();
        }
    }

    // Tab switching
    function switchTab(tab) {
        document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
        document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
        
        document.querySelector(`[onclick="switchTab('${tab}')"]`).classList.add('active');
        document.getElementById(`tab-${tab}`).classList.add('active');
        
        // Re-init drag and drop when switching to quickreply tab
        if (tab === 'quickreply') {
            setTimeout(() => initDragAndDrop(), 100);
        }
    }

    // Flex Functions
    async function viewFlex(id) {
        currentFlexId = id;
        isViewMode = true;
        const response = await fetch(`/flex-messages/view/${id}`);
        const result = await response.json();
        if (result.success) {
            document.getElementById('modalTitle').textContent = 'üëÅÔ∏è ‡∏î‡∏π Flex';
            document.getElementById('flexId').value = id;
            document.getElementById('flexContent').value = JSON.stringify(result.content, null, 2);
            document.getElementById('flexContent').readOnly = true;
            document.getElementById('flexModal').style.display = 'block';
        } else {
            showAlert('error', result.message);
        }
    }

    async function editFlex(id) {
        currentFlexId = id;
        isViewMode = false;
        const response = await fetch(`/flex-messages/view/${id}`);
        const result = await response.json();
        if (result.success) {
            document.getElementById('modalTitle').textContent = '‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Flex';
            document.getElementById('flexId').value = id;
            document.getElementById('flexContent').value = JSON.stringify(result.content, null, 2);
            document.getElementById('flexContent').readOnly = false;
            document.getElementById('flexModal').style.display = 'block';
        }
    }

    async function saveFlex() {
        if (isViewMode) {
            showAlert('info', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å');
            return;
        }
        const id = document.getElementById('flexId').value;
        const content = document.getElementById('flexContent').value;
        try {
            JSON.parse(content);
            const response = await fetch(`/flex-messages/update/${id}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ content: content })
            });
            const result = await response.json();
            if (result.success) {
                showAlert('success', result.message);
                setTimeout(() => location.reload(), 1500);
            } else {
                showAlert('error', result.message);
            }
        } catch (e) {
            showAlert('error', '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        }
    }

    async function deleteFlex(id, filename) {
        if (!confirm(`‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå "${filename}"?`)) return;
        const response = await fetch(`/flex-messages/delete/${id}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });
        const result = await response.json();
        if (result.success) {
            showAlert('success', result.message);
            setTimeout(() => location.reload(), 1500);
        }
    }

    async function testFlex(id) {
        const response = await fetch(`/flex-messages/test/${id}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });
        const result = await response.json();
        showAlert(result.success ? 'success' : 'error', result.message);
    }

    document.getElementById('addFlexForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        const filename = document.getElementById('newFlexName').value;
        const content = document.getElementById('newFlexContent').value;
        try {
            JSON.parse(content);
            const response = await fetch('/flex-messages/add', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ filename, content })
            });
            const result = await response.json();
            if (result.success) {
                showAlert('success', result.message);
                setTimeout(() => location.reload(), 1500);
            } else {
                showAlert('error', result.message);
            }
        } catch (e) {
            showAlert('error', '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
        }
    });

    // Quick Reply Functions
    async function saveQuickReplySettings() {
        const enabled = document.getElementById('qrEnabled').checked;
        const keywords = document.getElementById('qrKeywords').value;
        const text = '<%= quickReplyConfig.quickReplySettings.text %>';
        
        const response = await fetch('/quickreply/settings', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ enabled, text, keywords })
        });
        const result = await response.json();
        if (result.success) {
            showAlert('success', result.message);
            setTimeout(() => location.reload(), 1500);
        }
    }

    async function saveFlexSettings() {
        const enabled = document.getElementById('flexEnabled').checked;
        const keywords = document.getElementById('flexKeywords').value;
        const sendWithQuickReply = document.getElementById('flexWithQR').checked;
        
        const response = await fetch('/quickreply/flex-settings', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ enabled, keywords, sendWithQuickReply })
        });
        const result = await response.json();
        if (result.success) {
            showAlert('success', result.message);
            setTimeout(() => location.reload(), 1500);
        }
    }

    // Quick Reply Text Modal
    function openQuickReplyTextModal() {
        document.getElementById('qrTextModal').style.display = 'block';
    }

    function closeQRTextModal() {
        document.getElementById('qrTextModal').style.display = 'none';
    }

    document.getElementById('qrTextForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        const newText = document.getElementById('qrText').value;
        
        const response = await fetch('/quickreply/settings', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
                enabled: <%= quickReplyConfig.quickReplySettings.enabled %>, 
                text: newText,
                keywords: '<%= quickReplyConfig.quickReplySettings.keywords.join(", ") %>'
            })
        });
        const result = await response.json();
        if (result.success) {
            showAlert('success', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
            setTimeout(() => location.reload(), 1500);
        } else {
            showAlert('error', result.message);
        }
    });

    async function toggleButton(id, enabled) {
        const btn = <%- JSON.stringify(quickReplyConfig.quickReplyButtons) %>.find(b => b.id === id);
        const response = await fetch('/quickreply/update-button', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ ...btn, enabled })
        });
        const result = await response.json();
        showAlert(result.success ? 'success' : 'error', result.message);
    }

    function openAddButtonModal() {
        isEditButton = false;
        document.getElementById('buttonModalTitle').textContent = '‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°';
        document.getElementById('buttonForm').reset();
        document.getElementById('buttonId').value = '';
        toggleButtonFields();
        document.getElementById('buttonModal').style.display = 'block';
    }

    function editButton(btnJson) {
        isEditButton = true;
        const btn = JSON.parse(btnJson.replace(/\\'/g, "'"));
        document.getElementById('buttonModalTitle').textContent = '‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏∏‡πà‡∏°';
        document.getElementById('buttonId').value = btn.id;
        document.getElementById('buttonType').value = btn.type;
        document.getElementById('buttonLabel').value = btn.label;
        document.getElementById('buttonImage').value = btn.imageUrl || '';
        if (btn.type === 'uri') {
            document.getElementById('buttonUri').value = btn.uri;
        } else {
            document.getElementById('buttonText').value = btn.text;
        }
        toggleButtonFields();
        document.getElementById('buttonModal').style.display = 'block';
    }

    async function deleteButton(id) {
        if (!confirm('‡∏•‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ?')) return;
        const response = await fetch('/quickreply/delete-button', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id })
        });
        const result = await response.json();
        if (result.success) {
            showAlert('success', result.message);
            setTimeout(() => location.reload(), 1500);
        }
    }

    document.getElementById('buttonForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        const formData = {
            id: document.getElementById('buttonId').value,
            type: document.getElementById('buttonType').value,
            label: document.getElementById('buttonLabel').value,
            imageUrl: document.getElementById('buttonImage').value,
            enabled: true
        };

        if (formData.type === 'uri') {
            formData.uri = document.getElementById('buttonUri').value;
        } else {
            formData.text = document.getElementById('buttonText').value;
        }

        const url = isEditButton ? '/quickreply/update-button' : '/quickreply/add-button';
        const response = await fetch(url, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
        });
        const result = await response.json();
        if (result.success) {
            showAlert('success', result.message);
            setTimeout(() => location.reload(), 1500);
        }
    });

    function toggleButtonFields() {
        const type = document.getElementById('buttonType').value;
        const uriField = document.getElementById('uriField');
        const textField = document.getElementById('textField');
        
        if (type === 'uri') {
            uriField.classList.remove('hidden');
            textField.classList.add('hidden');
        } else {
            uriField.classList.add('hidden');
            textField.classList.remove('hidden');
        }
    }

    // Modal Functions
    function openAddModal() {
        document.getElementById('addModal').style.display = 'block';
    }

    function closeAddModal() {
        document.getElementById('addModal').style.display = 'none';
    }

    function closeModal() {
        document.getElementById('flexModal').style.display = 'none';
    }

    function closeButtonModal() {
        document.getElementById('buttonModal').style.display = 'none';
    }

    window.onclick = function(event) {
        if (event.target.classList.contains('modal')) {
            event.target.style.display = 'none';
        }
    }

    // Initialize on page load
    window.addEventListener('load', function() {
        initDragAndDrop();
    });
</script>

<%- include('partials/footer') %>