<%- include('partials/header', {
    title: '‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô',
    pageIcon: 'üé®',
    pageTitle: '‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô',
    pageSubtitle: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Flex Messages ‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô',
    username: username,
    activePage: 'promotions'
}) %>

<style>
    .promo-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .promo-card {
        background: white;
        border: 2px solid #e0e0e0;
        border-radius: 15px;
        overflow: hidden;
        transition: all 0.3s ease;
        cursor: move;
        position: relative;
        user-select: none;
    }

    .promo-card:hover {
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
        transform: translateY(-5px);
    }

    .promo-card.dragging {
        opacity: 0.4;
        cursor: grabbing;
        transform: scale(0.95);
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
    }

    .promo-card.drag-over {
        border: 3px dashed #667eea;
        background: rgba(102, 126, 234, 0.05);
    }

    .promo-card:active {
        cursor: grabbing;
    }

    .promo-card img {
        width: 100%;
        height: 200px;
        object-fit: cover;
        pointer-events: none;
    }

    .promo-card-body {
        padding: 20px;
    }

    .promo-card-title {
        font-size: 1.1em;
        font-weight: bold;
        color: #333;
        margin-bottom: 10px;
        line-height: 1.4;
    }

    .promo-card-url {
        font-size: 0.8em;
        color: #999;
        margin-bottom: 10px;
        word-break: break-all;
    }

    .promo-card-button-preview {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 10px;
        margin-bottom: 15px;
        font-size: 0.85em;
    }

    .promo-card-button-preview .btn-preview {
        display: inline-block;
        padding: 8px 16px;
        border-radius: 6px;
        color: white;
        font-weight: bold;
        margin-top: 5px;
    }

    .promo-card-actions {
        display: flex;
        gap: 10px;
    }

    .promo-card-actions button {
        flex: 1;
        padding: 8px;
        font-size: 0.9em;
    }

    .order-badge {
        position: absolute;
        top: 10px;
        left: 10px;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        width: 35px;
        height: 35px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 1.1em;
        z-index: 1;
        pointer-events: none;
    }

    .toggle-switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 30px;
    }

    .toggle-switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: 0.4s;
        border-radius: 30px;
    }

    .slider:before {
        position: absolute;
        content: "";
        height: 22px;
        width: 22px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: 0.4s;
        border-radius: 50%;
    }

    input:checked + .slider {
        background-color: #28a745;
    }

    input:checked + .slider:before {
        transform: translateX(30px);
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        animation: fadeIn 0.3s;
        overflow-y: auto;
    }

    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    .modal-content {
        background-color: white;
        margin: 3% auto;
        padding: 0;
        border-radius: 15px;
        width: 90%;
        max-width: 600px;
        animation: slideDown 0.3s;
        max-height: 90vh;
        overflow-y: auto;
    }

    @keyframes slideDown {
        from {
            transform: translateY(-50px);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    .modal-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        border-radius: 15px 15px 0 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: sticky;
        top: 0;
        z-index: 10;
    }

    .modal-header h2 {
        margin: 0;
        border: none;
        padding: 0;
    }

    .close {
        color: white;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        background: none;
        border: none;
    }

    .close:hover {
        opacity: 0.8;
    }

    .modal-body {
        padding: 30px;
    }

    .status-badge {
        padding: 5px 12px;
        border-radius: 15px;
        font-size: 0.85em;
        font-weight: bold;
        display: inline-block;
        margin-left: 10px;
    }

    .status-enabled {
        background: #d4edda;
        color: #155724;
    }

    .status-disabled {
        background: #f8d7da;
        color: #721c24;
    }

    .color-picker-wrapper {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .color-picker-wrapper input[type="color"] {
        width: 60px;
        height: 40px;
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        cursor: pointer;
    }

    .color-picker-wrapper input[type="text"] {
        flex: 1;
        font-family: 'Courier New', monospace;
    }

    .preview-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        border-radius: 20px;
        padding: 40px 30px;
        margin-top: 20px;
        box-shadow: 0 10px 40px rgba(0,0,0,0.2);
    }

    .preview-phone {
        background: #f5f5f5;
        border-radius: 30px;
        box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        padding: 25px;
        margin: 0 auto;
        max-width: 100%;
        overflow-x: auto;
        border: 15px solid #2c3e50;
        position: relative;
    }

    .flex-carousel {
        display: flex;
        gap: 20px;
        overflow-x: auto;
        padding: 15px 5px;
        scroll-behavior: smooth;
        -webkit-overflow-scrolling: touch;
    }

    .flex-carousel::-webkit-scrollbar {
        height: 10px;
    }

    .flex-carousel::-webkit-scrollbar-track {
        background: #e0e0e0;
        border-radius: 10px;
    }

    .flex-carousel::-webkit-scrollbar-thumb {
        background: #667eea;
        border-radius: 10px;
    }

    .flex-carousel::-webkit-scrollbar-thumb:hover {
        background: #5568d3;
    }

    .flex-bubble {
        min-width: 310px;
        max-width: 310px;
        background: white;
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 0 4px 15px rgba(0,0,0,0.15);
        flex-shrink: 0;
        transition: transform 0.3s;
    }

    .flex-bubble:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.2);
    }

    .flex-bubble img {
        width: 100%;
        height: 310px;
        object-fit: cover;
        display: block;
    }

    .flex-bubble-body {
        padding: 20px;
        min-height: 80px;
    }

    .flex-bubble-body > div {
        line-height: 1.5;
        word-wrap: break-word;
    }

    .flex-bubble-footer {
        padding: 0 20px 20px 20px;
    }

    .flex-button {
        width: 100%;
        padding: 12px;
        border: none;
        border-radius: 10px;
        color: white;
        font-weight: bold;
        cursor: pointer;
        font-size: 16px;
        transition: all 0.3s;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    }

    .flex-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    }

    .flex-button:active {
        transform: translateY(0);
    }

    .preview-empty {
        text-align: center;
        padding: 60px 20px;
        color: #fff;
    }

    .preview-empty-icon {
        font-size: 4em;
        margin-bottom: 20px;
        opacity: 0.9;
    }

    .preview-empty h3 {
        color: #fff;
        margin-bottom: 10px;
        font-size: 1.3em;
    }

    .preview-empty p {
        color: rgba(255,255,255,0.8);
        margin-bottom: 20px;
    }

    .hidden {
        display: none;
    }

    .carousel-indicator {
        text-align: center;
        margin-top: 15px;
        color: rgb(0 0 0 / 70%);
        font-size: 0.9em;
    }

    @media (max-width: 768px) {
        .promo-grid {
            grid-template-columns: 1fr;
        }

        .preview-container {
            padding: 30px 20px;
        }

        .preview-phone {
            padding: 20px;
            border-width: 10px;
        }

        .flex-bubble {
            min-width: 280px;
            max-width: 280px;
        }

        .flex-bubble img {
            height: 280px;
        }
    }
</style>

<!-- Promotion Settings Section -->
<div class="section">
    <h2>
        ‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô
        <button class="btn btn-primary" onclick="openSettingsModal()">‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</button>
    </h2>
    
    <div class="info-box">
        üí° <strong>‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:</strong> <%= keywords %>
        <span class="status-badge <%= enabled ? 'status-enabled' : 'status-disabled' %>">
            <%= enabled ? '‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‚ùå ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' %>
        </span>
    </div>

    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin-top: 15px;">
        <div style="background: white; padding: 15px; border-radius: 10px; border-left: 5px solid <%= flexBackgroundColor %>;">
            <strong>üé® ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á Flex:</strong><br>
            <div style="display: flex; align-items: center; gap: 10px; margin-top: 8px;">
                <div style="width: 35px; height: 35px; background: <%= flexBackgroundColor %>; border-radius: 8px; border: 2px solid #e0e0e0;"></div>
                <code style="font-size: 0.9em;"><%= flexBackgroundColor %></code>
            </div>
        </div>

        <div style="background: white; padding: 15px; border-radius: 10px; border-left: 5px solid <%= flexTextColor %>;">
            <strong>üî§ ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Flex:</strong><br>
            <div style="display: flex; align-items: center; gap: 10px; margin-top: 8px;">
                <div style="width: 35px; height: 35px; background: <%= flexTextColor %>; border-radius: 8px; border: 2px solid #e0e0e0;"></div>
                <code style="font-size: 0.9em;"><%= flexTextColor %></code>
            </div>
        </div>
    </div>
</div>

<!-- Promotions List Section -->
<div class="section">
    <h2>
        üé® ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô
        <button class="btn btn-success" onclick="openAddModal()">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</button>
    </h2>

    <div class="info-box" style="background: #fff3cd; border-left-color: #ffc107;">
        üí° <strong>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</strong> ‡∏•‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    </div>

    <% if (promotions.length === 0) { %>
        <div class="empty-state">
            <div class="icon">üî≠</div>
            <h3>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</h3>
            <p>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
        </div>
    <% } else { %>
        <div class="promo-grid" id="promoGrid">
            <% promotions.forEach(function(promo) { %>
                <div class="promo-card" draggable="true" data-id="<%= promo.id %>" data-order="<%= promo.order || 0 %>">
                    <div class="order-badge"><%= promo.order || 0 %></div>
                    <img src="<%= promo.imageUrl %>" alt="<%= promo.title %>" onerror="this.src='https://via.placeholder.com/300x200/667eea/ffffff?text=No+Image'">
                    <div class="promo-card-body">
                        <div class="promo-card-title"><%= promo.title %></div>
                        <div class="promo-card-url">üîó <%= promo.linkUrl %></div>
                        
                        <div style="background: #f8f9fa; border-radius: 8px; padding: 10px; margin-bottom: 10px; font-size: 0.85em;">
                            <strong>üé® ‡∏™‡∏µ‡∏Å‡∏≤‡∏£‡πå‡∏î:</strong>
                            <div style="display: flex; gap: 10px; margin-top: 8px;">
                                <div style="flex: 1;">
                                    <small>‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á</small>
                                    <div style="display: flex; align-items: center; gap: 5px; margin-top: 3px;">
                                        <div style="width: 25px; height: 25px; background: <%= promo.backgroundColor || '#ffffff' %>; border-radius: 5px; border: 2px solid #e0e0e0;"></div>
                                        <code style="font-size: 0.8em;"><%= promo.backgroundColor || '#ffffff' %></code>
                                    </div>
                                </div>
                                <div style="flex: 1;">
                                    <small>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</small>
                                    <div style="display: flex; align-items: center; gap: 5px; margin-top: 3px;">
                                        <div style="width: 25px; height: 25px; background: <%= promo.textColor || '#333333' %>; border-radius: 5px; border: 2px solid #e0e0e0;"></div>
                                        <code style="font-size: 0.8em;"><%= promo.textColor || '#333333' %></code>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <% if (promo.button) { %>
                        <div class="promo-card-button-preview">
                            <strong>‡∏õ‡∏∏‡πà‡∏°:</strong> <%= promo.button.type === 'uri' ? 'üîó URL' : 'üí¨ Message' %>
                            <div class="btn-preview" style="background: <%= promo.button.color || '#667eea' %>;">
                                <%= promo.button.label || '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î' %>
                            </div>
                        </div>
                        <% } %>

                        <div class="promo-card-actions">
                            <button class="btn btn-primary" onclick='editPromotion(<%= JSON.stringify(promo) %>)'>
                                ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                            </button>
                            <button class="btn btn-danger" onclick="deletePromotion('<%= promo.id %>')">
                                üóëÔ∏è ‡∏•‡∏ö
                            </button>
                        </div>
                        <div style="margin-top: 15px; display: flex; justify-content: space-between; align-items: center;">
                            <span style="font-size: 0.9em; color: #666;">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</span>
                            <label class="toggle-switch">
                                <input type="checkbox" <%= promo.enabled ? 'checked' : '' %> onchange="togglePromotion('<%= promo.id %>', this.checked)">
                                <span class="slider"></span>
                            </label>
                        </div>
                    </div>
                </div>
            <% }); %>
        </div>
    <% } %>
</div>

<!-- Preview Section -->
<div class="section">
    <h2>
        üëÅÔ∏è ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Flex Message (‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á)
        <button class="btn btn-primary" onclick="refreshPreview()">üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä</button>
    </h2>

    <div class="info-box" style="background: #e7f3ff; border-left-color: #2196F3;">
        üí° <strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á Flex Message ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô LINE (310x310 ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•)
    </div>

    <div class="preview-container">
        <div class="preview-phone" id="previewPhone">
            <div class="preview-empty">
                <div class="preview-empty-icon">üì±</div>
                <h3>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...</h3>
                <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà</p>
                <button class="btn btn-primary" onclick="refreshPreview()" style="margin-top: 15px;">‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á</button>
            </div>
        </div>
    </div>
</div>

<!-- Add/Edit Promotion Modal -->
<div id="promoModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 id="modalTitle">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà</h2>
            <button class="close" onclick="closePromoModal()">&times;</button>
        </div>
        <div class="modal-body">
            <form id="promoForm">
                <input type="hidden" id="promoId" name="id">
                
                <div class="form-group">
                    <label for="promoTitle">üìù ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</label>
                    <input type="text" id="promoTitle" name="title" placeholder="‡πÄ‡∏ä‡πà‡∏ô: ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏∏‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©" required>
                    <small>‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î Flex</small>
                </div>

                <div class="form-group">
                    <label for="promoImageUrl">üñºÔ∏è URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</label>
                    <input type="url" id="promoImageUrl" name="imageUrl" placeholder="https://example.com/image.jpg" required>
                    <small>‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: 1040x1040 ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏• (1:1)</small>
                </div>

                <div class="form-group">
                    <label for="promoLinkUrl">üîó URL ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏´‡∏•‡∏±‡∏Å</label>
                    <input type="url" id="promoLinkUrl" name="linkUrl" placeholder="https://example.com/promotion" required>
                    <small>‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</small>
                </div>

                <hr style="margin: 25px 0; border: none; border-top: 2px solid #e0e0e0;">

                <h3 style="margin-bottom: 20px; color: #667eea;">üé® ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î Flex</h3>

                <div class="form-group">
                    <label for="cardBackgroundColor">üé® ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î</label>
                    <div class="color-picker-wrapper">
                        <input type="color" id="cardBackgroundColor" name="backgroundColor" value="#ffffff">
                        <input type="text" id="cardBackgroundColorText" value="#ffffff" placeholder="#ffffff">
                    </div>
                    <small>‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</small>
                </div>

                <div class="form-group">
                    <label for="cardTextColor">üî§ ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î</label>
                    <div class="color-picker-wrapper">
                        <input type="color" id="cardTextColor" name="textColor" value="#333333">
                        <input type="text" id="cardTextColorText" value="#333333" placeholder="#333333">
                    </div>
                    <small>‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</small>
                </div>

                <hr style="margin: 25px 0; border: none; border-top: 2px solid #e0e0e0;">

                <h3 style="margin-bottom: 20px; color: #667eea;">üîò ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°</h3>

                <div class="form-group">
                    <label for="buttonLabel">üî§ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏ô‡∏õ‡∏∏‡πà‡∏°</label>
                    <input type="text" id="buttonLabel" name="buttonLabel" placeholder="‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î" required>
                </div>

                <div class="form-group">
                    <label for="buttonType">üîß ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏õ‡∏∏‡πà‡∏°</label>
                    <select id="buttonType" name="buttonType" onchange="toggleButtonFields()">
                        <option value="uri">üîó ‡πÄ‡∏õ‡∏¥‡∏î URL</option>
                        <option value="message">üí¨ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="buttonColor">üé® ‡∏™‡∏µ‡∏õ‡∏∏‡πà‡∏°</label>
                    <div class="color-picker-wrapper">
                        <input type="color" id="buttonColor" name="buttonColor" value="#667eea">
                        <input type="text" id="buttonColorText" value="#667eea" placeholder="#667eea">
                    </div>
                </div>

                <div class="form-group" id="buttonUriField">
                    <label for="buttonUri">üîó URL ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°</label>
                    <input type="url" id="buttonUri" name="buttonUri" placeholder="https://example.com/promotion">
                    <small>URL ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°</small>
                </div>

                <div class="form-group hidden" id="buttonTextField">
                    <label for="buttonText">üí¨ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á</label>
                    <input type="text" id="buttonText" name="buttonText" placeholder="‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô">
                    <small>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°</small>
                </div>

                <div style="display: flex; gap: 10px; margin-top: 25px;">
                    <button type="submit" class="btn btn-success" style="flex: 1;">üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                    <button type="button" class="btn btn-secondary" onclick="closePromoModal()" style="flex: 1;">‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Settings Modal -->
<div id="settingsModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</h2>
            <button class="close" onclick="closeSettingsModal()">&times;</button>
        </div>
        <div class="modal-body">
            <form id="settingsForm">
                <div class="form-group">
                    <label for="promoKeywords">üîë ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î</label>
                    <input type="text" id="promoKeywords" name="keywords" value="<%= keywords %>" placeholder="‡πÇ‡∏õ‡∏£, ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô, promo" required>
                    <small>‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ (,)</small>
                </div>

                <div class="form-group">
                    <label>
                        <input type="checkbox" id="promoEnabled" name="enabled" <%= enabled ? 'checked' : '' %>>
                        ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô
                    </label>
                </div>

                <hr style="margin: 20px 0; border: none; border-top: 2px solid #e0e0e0;">

                <h3 style="margin-bottom: 15px; color: #667eea;">üé® ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á Flex Message</h3>

                <div class="form-group">
                    <label for="flexBackgroundColor">üé® ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á</label>
                    <div class="color-picker-wrapper">
                        <input type="color" id="flexBackgroundColor" name="flexBackgroundColor" value="<%= flexBackgroundColor %>">
                        <input type="text" id="flexBackgroundColorText" value="<%= flexBackgroundColor %>" placeholder="#667eea">
                    </div>
                </div>

                <div class="form-group">
                    <label for="flexTextColor">üî§ ‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</label>
                    <div class="color-picker-wrapper">
                        <input type="color" id="flexTextColor" name="flexTextColor" value="<%= flexTextColor %>">
                        <input type="text" id="flexTextColorText" value="<%= flexTextColor %>" placeholder="#ffffff">
                    </div>
                </div>

                <div style="display: flex; gap: 10px; margin-top: 20px;">
                    <button type="submit" class="btn btn-success" style="flex: 1;">üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                    <button type="button" class="btn btn-secondary" onclick="closeSettingsModal()" style="flex: 1;">‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // Store promotions data
    var promotionsData = <%- JSON.stringify(promotions) %>;
    var isEditMode = false;

    // Sync color pickers
    ['buttonColor', 'flexBackgroundColor', 'flexTextColor', 'cardBackgroundColor', 'cardTextColor'].forEach(id => {
        const colorInput = document.getElementById(id);
        const textInput = document.getElementById(id + 'Text');
        
        if (colorInput && textInput) {
            colorInput.addEventListener('input', function() {
                textInput.value = this.value;
            });
            
            textInput.addEventListener('input', function() {
                if (/^#[0-9A-F]{6}$/i.test(this.value)) {
                    colorInput.value = this.value;
                }
            });
        }
    });

    // Toggle button fields based on type
    function toggleButtonFields() {
        const type = document.getElementById('buttonType').value;
        const uriField = document.getElementById('buttonUriField');
        const textField = document.getElementById('buttonTextField');
        
        if (type === 'uri') {
            uriField.classList.remove('hidden');
            textField.classList.add('hidden');
            document.getElementById('buttonUri').required = true;
            document.getElementById('buttonText').required = false;
        } else {
            uriField.classList.add('hidden');
            textField.classList.remove('hidden');
            document.getElementById('buttonUri').required = false;
            document.getElementById('buttonText').required = true;
        }
    }

    // Promo Form Submit
    document.getElementById('promoForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = {
            id: document.getElementById('promoId').value,
            title: document.getElementById('promoTitle').value,
            imageUrl: document.getElementById('promoImageUrl').value,
            linkUrl: document.getElementById('promoLinkUrl').value,
            enabled: true,
            backgroundColor: document.getElementById('cardBackgroundColorText').value,
            textColor: document.getElementById('cardTextColorText').value,
            buttonLabel: document.getElementById('buttonLabel').value,
            buttonType: document.getElementById('buttonType').value,
            buttonColor: document.getElementById('buttonColorText').value,
            buttonUri: document.getElementById('buttonUri').value,
            buttonText: document.getElementById('buttonText').value
        };
        
        const url = isEditMode ? '/promotions/update' : '/promotions/add';
        
        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });
            
            const result = await response.json();
            
            if (result.success) {
                showAlert('success', result.message);
                setTimeout(() => location.reload(), 1500);
            } else {
                showAlert('error', result.message);
            }
        } catch (error) {
            showAlert('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
        }
    });

    // Settings Form Submit
    document.getElementById('settingsForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = {
            keywords: document.getElementById('promoKeywords').value,
            enabled: document.getElementById('promoEnabled').checked,
            flexBackgroundColor: document.getElementById('flexBackgroundColorText').value,
            flexTextColor: document.getElementById('flexTextColorText').value
        };
        
        try {
            const response = await fetch('/promotions/settings', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });
            
            const result = await response.json();
            
            if (result.success) {
                showAlert('success', result.message);
                setTimeout(() => location.reload(), 1500);
            } else {
                showAlert('error', result.message);
            }
        } catch (error) {
            showAlert('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
        }
    });

    // Modal Functions
    function openAddModal() {
        isEditMode = false;
        document.getElementById('modalTitle').textContent = '‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà';
        document.getElementById('promoForm').reset();
        document.getElementById('promoId').value = '';
        document.getElementById('buttonColorText').value = '#667eea';
        document.getElementById('buttonColor').value = '#667eea';
        document.getElementById('cardBackgroundColorText').value = '#ffffff';
        document.getElementById('cardBackgroundColor').value = '#ffffff';
        document.getElementById('cardTextColorText').value = '#333333';
        document.getElementById('cardTextColor').value = '#333333';
        toggleButtonFields();
        document.getElementById('promoModal').style.display = 'block';
    }

    function editPromotion(promo) {
        isEditMode = true;
        document.getElementById('modalTitle').textContent = '‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô';
        document.getElementById('promoId').value = promo.id;
        document.getElementById('promoTitle').value = promo.title;
        document.getElementById('promoImageUrl').value = promo.imageUrl;
        document.getElementById('promoLinkUrl').value = promo.linkUrl;
        
        const bgColor = promo.backgroundColor || '#ffffff';
        const txtColor = promo.textColor || '#333333';
        document.getElementById('cardBackgroundColorText').value = bgColor;
        document.getElementById('cardBackgroundColor').value = bgColor;
        document.getElementById('cardTextColorText').value = txtColor;
        document.getElementById('cardTextColor').value = txtColor;
        
        if (promo.button) {
            document.getElementById('buttonLabel').value = promo.button.label || '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î';
            document.getElementById('buttonType').value = promo.button.type || 'uri';
            document.getElementById('buttonColorText').value = promo.button.color || '#667eea';
            document.getElementById('buttonColor').value = promo.button.color || '#667eea';
            document.getElementById('buttonUri').value = promo.button.uri || '';
            document.getElementById('buttonText').value = promo.button.text || '';
        }
        
        toggleButtonFields();
        document.getElementById('promoModal').style.display = 'block';
    }

    function closePromoModal() {
        document.getElementById('promoModal').style.display = 'none';
    }

    function openSettingsModal() {
        document.getElementById('settingsModal').style.display = 'block';
    }

    function closeSettingsModal() {
        document.getElementById('settingsModal').style.display = 'none';
    }

    // Toggle Promotion
    async function togglePromotion(id, enabled) {
        try {
            const promo = promotionsData.find(p => p.id === id);
            if (!promo) {
                showAlert('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô');
                return;
            }
            
            const response = await fetch('/promotions/update', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    id: id,
                    title: promo.title,
                    imageUrl: promo.imageUrl,
                    linkUrl: promo.linkUrl,
                    enabled: enabled,
                    backgroundColor: promo.backgroundColor || '#ffffff',
                    textColor: promo.textColor || '#333333',
                    buttonLabel: promo.button?.label || '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
                    buttonType: promo.button?.type || 'uri',
                    buttonColor: promo.button?.color || '#667eea',
                    buttonUri: promo.button?.uri || '',
                    buttonText: promo.button?.text || ''
                })
            });
            
            const result = await response.json();
            
            if (result.success) {
                showAlert('success', enabled ? '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß' : '‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
                setTimeout(() => refreshPreview(), 500);
            } else {
                showAlert('error', result.message);
                setTimeout(() => location.reload(), 1000);
            }
        } catch (error) {
            showAlert('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
            setTimeout(() => location.reload(), 1000);
        }
    }

    // Delete Promotion
    async function deletePromotion(id) {
        if (!confirm('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏ô‡∏µ‡πâ?')) {
            return;
        }
        
        try {
            const response = await fetch('/promotions/delete', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id: id })
            });
            
            const result = await response.json();
            
            if (result.success) {
                showAlert('success', result.message);
                setTimeout(() => location.reload(), 1500);
            } else {
                showAlert('error', result.message);
            }
        } catch (error) {
            showAlert('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
        }
    }

    // Preview
    async function refreshPreview() {
        const previewPhone = document.getElementById('previewPhone');
        previewPhone.innerHTML = '<div class="preview-empty"><div class="preview-empty-icon">‚è≥</div><h3>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</h3><p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà</p></div>';

        try {
            const response = await fetch('/promotions/preview');
            const result = await response.json();

            if (result.success && result.flex) {
                const carousel = result.flex;
                let html = '<div class="flex-carousel">';

                if (carousel.contents && carousel.contents.length > 0) {
                    carousel.contents.forEach(bubble => {
                        const bgColor = bubble.body?.backgroundColor || '#ffffff';
                        const textColor = bubble.body?.contents[0]?.color || '#333333';
                        const btnColor = bubble.footer?.contents[0]?.color || '#667eea';
                        
                        html += `<div class="flex-bubble" style="background: ${bgColor};">`;
                        
                        if (bubble.hero) {
                            html += `<img src="${bubble.hero.url}" alt="Promotion" onerror="this.src='https://via.placeholder.com/310x310/667eea/ffffff?text=No+Image'">`;
                        }
                        
                        if (bubble.body) {
                            html += `<div class="flex-bubble-body" style="background: ${bgColor};">`;
                            bubble.body.contents.forEach(content => {
                                if (content.type === 'text') {
                                    const fontSize = content.size === 'md' ? '16px' : content.size === 'sm' ? '14px' : content.size === 'lg' ? '18px' : '16px';
                                    const fontWeight = content.weight === 'bold' ? 'bold' : 'normal';
                                    html += `<div style="color: ${content.color}; font-weight: ${fontWeight}; font-size: ${fontSize}; margin-bottom: 8px;">${content.text}</div>`;
                                }
                            });
                            html += '</div>';
                        }
                        
                        if (bubble.footer) {
                            html += `<div class="flex-bubble-footer" style="background: ${bgColor};">`;
                            bubble.footer.contents.forEach(content => {
                                if (content.type === 'button') {
                                    const actionType = content.action.type === 'uri' ? 'üîó' : 'üí¨';
                                    html += `<button class="flex-button" style="background: ${content.color};" title="${actionType} ${content.action.type}">${content.action.label}</button>`;
                                }
                            });
                            html += '</div>';
                        }
                        
                        html += '</div>';
                    });

                    html += '</div>';
                    
                    const totalPromotions = carousel.contents.length;
                    html += `<div class="carousel-indicator">üìä ‡πÅ‡∏™‡∏î‡∏á ${totalPromotions} ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô (‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)</div>`;
                    
                    previewPhone.innerHTML = html;
                } else {
                    previewPhone.innerHTML = '<div class="preview-empty"><div class="preview-empty-icon">üî≠</div><h3>‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</h3><p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p></div>';
                }
            } else {
                previewPhone.innerHTML = '<div class="preview-empty"><div class="preview-empty-icon">üòï</div><h3>‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ</h3><p>' + (result.message || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô') + '</p></div>';
            }
        } catch (error) {
            console.error('Preview error:', error);
            previewPhone.innerHTML = '<div class="preview-empty"><div class="preview-empty-icon">‚ùå</div><h3>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h3><p>‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ</p></div>';
        }
    }

    // Modal click outside to close
    window.onclick = function(event) {
        const promoModal = document.getElementById('promoModal');
        const settingsModal = document.getElementById('settingsModal');
        if (event.target == promoModal) {
            closePromoModal();
        }
        if (event.target == settingsModal) {
            closeSettingsModal();
        }
    }

    // Auto load preview
    window.addEventListener('load', () => {
        setTimeout(refreshPreview, 500);
    });

    // ‚ú®‚ú®‚ú® DRAG AND DROP FUNCTIONALITY - FIXED VERSION ‚ú®‚ú®‚ú®
    let draggedElement = null;
    let sourceIndex = null;

    const promoGrid = document.getElementById('promoGrid');
    if (promoGrid) {
        // Dragstart event
        promoGrid.addEventListener('dragstart', (e) => {
            if (e.target.classList.contains('promo-card')) {
                draggedElement = e.target;
                sourceIndex = Array.from(promoGrid.children).indexOf(draggedElement);
                e.target.classList.add('dragging');
                
                e.dataTransfer.effectAllowed = 'move';
                e.dataTransfer.setData('text/html', e.target.innerHTML);
                
                console.log('‚úÖ Drag started:', { id: draggedElement.dataset.id, sourceIndex });
            }
        });

        // Dragend event
        promoGrid.addEventListener('dragend', (e) => {
            if (e.target.classList.contains('promo-card')) {
                e.target.classList.remove('dragging');
                
                document.querySelectorAll('.promo-card').forEach(card => {
                    card.classList.remove('drag-over');
                });
                
                console.log('‚úÖ Drag ended');
            }
        });

        // Dragover event
        promoGrid.addEventListener('dragover', (e) => {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
            
            // ‚úÖ CRITICAL FIX: Validate draggedElement
            if (!draggedElement || !(draggedElement instanceof HTMLElement)) {
                console.warn('‚ö†Ô∏è Invalid draggedElement');
                return;
            }
            
            const afterElement = getDragAfterElement(promoGrid, e.clientX, e.clientY);
            const currentCards = [...promoGrid.querySelectorAll('.promo-card:not(.dragging)')];
            
            currentCards.forEach(card => {
                card.classList.remove('drag-over');
            });
            
            // ‚úÖ CRITICAL FIX: Only insertBefore if afterElement is valid
            try {
                if (afterElement == null) {
                    if (promoGrid.lastElementChild !== draggedElement) {
                        promoGrid.appendChild(draggedElement);
                    }
                } else {
                    // ‚úÖ Extra validation before insertBefore
                    if (afterElement instanceof HTMLElement && 
                        afterElement !== draggedElement && 
                        afterElement !== draggedElement.nextSibling) {
                        promoGrid.insertBefore(draggedElement, afterElement);
                    }
                }
            } catch (error) {
                console.error('‚ùå Error in dragover:', error);
            }
        });

        // Drop event
        promoGrid.addEventListener('drop', async (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            if (!draggedElement) {
                console.warn('‚ö†Ô∏è No draggedElement on drop');
                return;
            }
            
            document.querySelectorAll('.promo-card').forEach(card => {
                card.classList.remove('dragging', 'drag-over');
            });
            
            const newIndex = Array.from(promoGrid.children).indexOf(draggedElement);
            console.log('üìç Drop position:', { sourceIndex, newIndex });
            
            if (sourceIndex !== null && sourceIndex !== newIndex) {
                await saveNewOrder();
            } else {
                console.log('‚ÑπÔ∏è No order change detected');
            }
            
            draggedElement = null;
            sourceIndex = null;
        });

        // Dragenter event
        promoGrid.addEventListener('dragenter', (e) => {
            if (e.target.classList.contains('promo-card') && e.target !== draggedElement) {
                e.target.classList.add('drag-over');
            }
        });

        // Dragleave event
        promoGrid.addEventListener('dragleave', (e) => {
            if (e.target.classList.contains('promo-card')) {
                e.target.classList.remove('drag-over');
            }
        });
    }

    // ‚ú® Get drag after element
    function getDragAfterElement(container, x, y) {
        const draggableElements = [...container.querySelectorAll('.promo-card:not(.dragging)')];
        
        if (draggableElements.length === 0) {
            return null;
        }

        return draggableElements.reduce((closest, child) => {
            const box = child.getBoundingClientRect();
            
            const centerX = box.left + box.width / 2;
            const centerY = box.top + box.height / 2;
            
            const offsetX = x - centerX;
            const offsetY = y - centerY;
            
            let offset;
            if (Math.abs(offsetY) > box.height / 4) {
                offset = offsetY;
            } else {
                offset = offsetX;
            }

            if (offset < 0 && offset > closest.offset) {
                return { offset: offset, element: child };
            } else {
                return closest;
            }
        }, { offset: Number.NEGATIVE_INFINITY }).element;
    }

    // ‚ú® Save new order
    async function saveNewOrder() {
        const cards = document.querySelectorAll('.promo-card');
        
        if (!cards || cards.length === 0) {
            console.warn('‚ö†Ô∏è No promotion cards found');
            return;
        }
        
        const orders = [];

        cards.forEach((card, index) => {
            const id = card.getAttribute('data-id');
            if (id) {
                const newOrder = index + 1;
                orders.push({ id: id, order: newOrder });
                
                const badge = card.querySelector('.order-badge');
                if (badge) {
                    badge.textContent = newOrder;
                }
            }
        });

        if (orders.length === 0) {
            console.warn('‚ö†Ô∏è No valid orders to save');
            return;
        }

        console.log('üíæ Saving new order:', orders);

        try {
            const response = await fetch('/promotions/reorder', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orders: orders })
            });

            const result = await response.json();

            if (result.success) {
                showAlert('success', '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                
                promotionsData.forEach(promo => {
                    const order = orders.find(o => o.id === promo.id);
                    if (order) {
                        promo.order = order.order;
                    }
                });
                
                setTimeout(() => refreshPreview(), 500);
            } else {
                showAlert('error', result.message);
                setTimeout(() => location.reload(), 1500);
            }
        } catch (error) {
            console.error('‚ùå Reorder error:', error);
            showAlert('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
            setTimeout(() => location.reload(), 1500);
        }
    }
</script>

<%- include('partials/footer') %>