<%- include('partials/header', {
    title: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö',
    pageIcon: '‚öôÔ∏è',
    pageTitle: '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö',
    pageSubtitle: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ LINE Channels ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
    username: username,
    activePage: 'settings'
}) %>

<style>
    .channel-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .channel-card {
        background: white;
        border: 2px solid #e0e0e0;
        border-radius: 15px;
        overflow: hidden;
        transition: all 0.3s;
        position: relative;
    }

    .channel-card:hover {
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
        transform: translateY(-5px);
        border-color: #667eea;
    }

    .channel-card.disabled {
        opacity: 0.6;
        background: #f8f9fa;
    }

    .channel-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .channel-header img {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        border: 3px solid white;
        object-fit: cover;
        background: white;
    }

    .channel-header .placeholder-avatar {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        border: 3px solid white;
        background: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2em;
    }

    .channel-info {
        flex: 1;
    }

    .channel-info h3 {
        margin: 0 0 5px 0;
        font-size: 1.2em;
    }

    .channel-info small {
        opacity: 0.9;
        font-size: 0.85em;
    }

    .channel-body {
        padding: 20px;
    }

    .channel-detail {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
        font-size: 0.9em;
        color: #666;
        padding: 8px;
        background: #f8f9fa;
        border-radius: 5px;
    }

    .channel-features {
        margin: 15px 0;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
    }

    .channel-features h4 {
        margin: 0 0 10px 0;
        color: #667eea;
        font-size: 0.95em;
    }

    .feature-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 0;
        border-bottom: 1px solid #e0e0e0;
    }

    .feature-item:last-child {
        border-bottom: none;
    }

    .feature-item label {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.9em;
        color: #333;
    }

    .channel-actions {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 10px;
        margin-top: 15px;
    }

    .channel-actions button {
        padding: 10px;
        font-size: 0.9em;
    }

    .toggle-switch {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 24px;
    }

    .toggle-switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: 0.4s;
        border-radius: 24px;
    }

    .slider:before {
        position: absolute;
        content: "";
        height: 18px;
        width: 18px;
        left: 3px;
        bottom: 3px;
        background-color: white;
        transition: 0.4s;
        border-radius: 50%;
    }

    input:checked + .slider {
        background-color: #28a745;
    }

    input:checked + .slider:before {
        transform: translateX(26px);
    }

    .status-badge {
        position: absolute;
        top: 15px;
        right: 15px;
        padding: 5px 12px;
        border-radius: 15px;
        font-size: 0.8em;
        font-weight: bold;
    }

    .status-enabled {
        background: #d4edda;
        color: #155724;
    }

    .status-disabled {
        background: #f8d7da;
        color: #721c24;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        animation: fadeIn 0.3s;
        overflow-y: auto;
    }

    .modal-content {
        background-color: white;
        margin: 3% auto;
        padding: 0;
        border-radius: 15px;
        width: 90%;
        max-width: 600px;
        animation: slideDown 0.3s;
    }

    .modal-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        border-radius: 15px 15px 0 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-header h2 {
        margin: 0;
        border: none;
        padding: 0;
    }

    .close {
        color: white;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
        background: none;
        border: none;
        padding: 0;
        line-height: 1;
    }

    .close:hover {
        opacity: 0.8;
    }

    .modal-body {
        padding: 30px;
    }

    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @keyframes slideDown {
        from {
            transform: translateY(-50px);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    @media (max-width: 768px) {
        .channel-grid {
            grid-template-columns: 1fr;
        }

        .channel-actions {
            grid-template-columns: 1fr;
        }
    }
</style>

<!-- LINE Channels Section -->
<div class="section">
    <h2>
        üì± LINE Channels
        <button class="btn btn-success" onclick="openAddChannelModal()">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° Channel</button>
    </h2>

    <% if (lineChannels.length === 0) { %>
        <div class="empty-state">
            <div class="icon">üì±</div>
            <h3>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ LINE Channel</h3>
            <p>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏û‡∏¥‡πà‡∏° Channel" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ LINE OA ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
        </div>
    <% } else { %>
        <div class="channel-grid">
            <% lineChannels.forEach(function(channel) { %>
                <div class="channel-card <%= !channel.enabled ? 'disabled' : '' %>">
                    <span class="status-badge <%= channel.enabled ? 'status-enabled' : 'status-disabled' %>">
                        <%= channel.enabled ? '‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‚ùå ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' %>
                    </span>
                    
                    <div class="channel-header">
                        <% if (channel.profilePictureUrl) { %>
                            <img src="<%= channel.profilePictureUrl %>" alt="<%= channel.name %>" onerror="this.outerHTML='<div class=\'placeholder-avatar\'>ü§ñ</div>'">
                        <% } else { %>
                            <div class="placeholder-avatar">ü§ñ</div>
                        <% } %>
                        <div class="channel-info">
                            <h3><%= channel.name %></h3>
                            <small><%= channel.displayName || 'N/A' %></small>
                            <% if (channel.basicId) { %>
                                <br><small>ID: <%= channel.basicId %></small>
                            <% } %>
                        </div>
                    </div>

                    <div class="channel-body">
                        <div class="channel-detail">
                            <span>üîë Access Token:</span>
                            <strong><%= channel.channelAccessToken.substring(0, 20) %>...</strong>
                        </div>

                        <div class="channel-detail">
                            <span>üîê Channel Secret:</span>
                            <strong><%= channel.channelSecret.substring(0, 10) %>...</strong>
                        </div>

                        <div class="channel-detail">
                            <span>üìÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠:</span>
                            <strong><%= new Date(channel.createdAt).toLocaleDateString('th-TH') %></strong>
                        </div>

                        <!-- Features Section -->
                        <div class="channel-features">
                            <h4>üéØ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h4>
                            
                            <div class="feature-item">
                                <label>
                                    <span>üéÅ</span>
                                    <span>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ä‡∏£‡πå</span>
                                </label>
                                <label class="toggle-switch">
                                    <input type="checkbox" 
                                           <%= channel.features?.activities ? 'checked' : '' %> 
                                           onchange="updateFeature('<%= channel.id %>', 'activities', this.checked)">
                                    <span class="slider"></span>
                                </label>
                            </div>

                            <div class="feature-item">
                                <label>
                                    <span>üé®</span>
                                    <span>‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</span>
                                </label>
                                <label class="toggle-switch">
                                    <input type="checkbox" 
                                           <%= channel.features?.promotions ? 'checked' : '' %> 
                                           onchange="updateFeature('<%= channel.id %>', 'promotions', this.checked)">
                                    <span class="slider"></span>
                                </label>
                            </div>

                            <div class="feature-item">
                                <label>
                                    <span>üí¨</span>
                                    <span>Flex Messages & Quick Reply</span>
                                </label>
                                <label class="toggle-switch">
                                    <input type="checkbox" 
                                           <%= channel.features?.flexMessages ? 'checked' : '' %> 
                                           onchange="updateFeature('<%= channel.id %>', 'flexMessages', this.checked)">
                                    <span class="slider"></span>
                                </label>
                            </div>
                        </div>

                        <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 15px; padding: 10px; background: #f8f9fa; border-radius: 8px;">
                            <span style="font-weight: 600;">‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Channel:</span>
                            <label class="toggle-switch">
                                <input type="checkbox" <%= channel.enabled ? 'checked' : '' %> onchange="toggleChannel('<%= channel.id %>', this.checked)">
                                <span class="slider"></span>
                            </label>
                        </div>

                        <div class="channel-actions">
                            <button class="btn btn-primary" onclick="testChannel('<%= channel.id %>')">
                                üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
                            </button>
                            <button class="btn btn-warning" onclick="editChannel('<%= channel.id %>')">
                                ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                            </button>
                            <button class="btn btn-danger" onclick="deleteChannel('<%= channel.id %>', '<%= channel.name %>')">
                                üóëÔ∏è ‡∏•‡∏ö
                            </button>
                            <button class="btn btn-secondary" onclick="viewChannelDetails('<%= channel.id %>')">
                                üëÅÔ∏è ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                            </button>
                        </div>
                    </div>
                </div>
            <% }); %>
        </div>
    <% } %>
</div>

<!-- Webhook Configuration Section -->
<div class="section">
    <h2>üîî Webhook URL</h2>
    
    <div style="background: #e7f3ff; padding: 20px; border-radius: 10px; border-left: 5px solid #2196F3;">
        <h3 style="color: #1976D2; margin-bottom: 15px;">üìç Webhook URL ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h3>
        <div style="background: white; padding: 15px; border-radius: 8px; font-family: 'Courier New', monospace; word-break: break-all; margin-bottom: 15px;">
            <%= webhookUrl %>
        </div>
        <button class="btn btn-primary" onclick="copyWebhookUrl()">üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å URL</button>
    </div>

    <div class="info-box" style="margin-top: 20px;">
        üí° <strong>‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Webhook URL ‡πÉ‡∏ô LINE:</strong><br>
        1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà <a href="https://developers.line.biz/console/" target="_blank" style="color: #667eea;">LINE Developers Console</a><br>
        2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Provider ‡πÅ‡∏•‡∏∞ Channel ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì<br>
        3. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πá‡∏ö "Messaging API"<br>
        4. ‡∏´‡∏≤‡∏™‡πà‡∏ß‡∏ô "Webhook settings"<br>
        5. ‡∏Å‡∏î "Edit" ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏á Webhook URL<br>
        6. ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô "Use webhook"
    </div>
</div>

<!-- Server Configuration Section -->
<div class="section">
    <h2>üñ•Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå</h2>
    
    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px;">
        <div style="background: #f8f9fa; padding: 20px; border-radius: 10px; border-left: 5px solid #667eea;">
            <h4 style="color: #667eea; margin-bottom: 10px;">üîå Server Port</h4>
            <p style="font-size: 1.5em; font-weight: bold; color: #333;"><%= serverPort %></p>
        </div>

        <div style="background: #f8f9fa; padding: 20px; border-radius: 10px; border-left: 5px solid #28a745;">
            <h4 style="color: #28a745; margin-bottom: 10px;">üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö</h4>
            <p style="font-size: 1.5em; font-weight: bold; color: #333;">‚úÖ Online</p>
        </div>

        <div style="background: #f8f9fa; padding: 20px; border-radius: 10px; border-left: 5px solid #17a2b8;">
            <h4 style="color: #17a2b8; margin-bottom: 10px;">üïê Uptime</h4>
            <p style="font-size: 1.5em; font-weight: bold; color: #333;"><%= uptime %></p>
        </div>

        <div style="background: #f8f9fa; padding: 20px; border-radius: 10px; border-left: 5px solid #ffc107;">
            <h4 style="color: #e0a800; margin-bottom: 10px;">üì¶ Version</h4>
            <p style="font-size: 1.5em; font-weight: bold; color: #333;">2.4</p>
        </div>
    </div>
</div>

<!-- API Test Section -->
<div class="section">
    <h2>üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠</h2>
    
    <div style="background: #f8f9fa; padding: 20px; border-radius: 10px;">
        <h4 style="margin-bottom: 15px;">‡∏ó‡∏î‡∏™‡∏≠‡∏ö Webhook</h4>
        <p style="margin-bottom: 15px; color: #666;">‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö Webhook URL</p>
        <button class="btn btn-warning" onclick="testWebhook()" id="testBtn">üî¨ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠</button>
        <div id="testResult" style="margin-top: 15px;"></div>
    </div>
</div>

<!-- Danger Zone Section -->
<div class="section">
    <h2 style="color: #dc3545;">‚ö†Ô∏è Danger Zone</h2>
    
    <div style="background: #f8d7da; padding: 20px; border-radius: 10px; border-left: 5px solid #dc3545;">
        <h4 style="color: #721c24; margin-bottom: 15px;">üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h4>
        <p style="color: #721c24; margin-bottom: 15px;">‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ)</p>
        <button class="btn btn-danger" onclick="clearUserData()">üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</button>
    </div>
</div>

<!-- Add/Edit Channel Modal -->
<div id="channelModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 id="modalTitle">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° LINE Channel</h2>
            <button class="close" onclick="closeChannelModal()">&times;</button>
        </div>
        <div class="modal-body">
            <form id="channelForm">
                <input type="hidden" id="channelId">
                
                <div class="form-group">
                    <label for="channelName">üìù ‡∏ä‡∏∑‡πà‡∏≠ Channel</label>
                    <input type="text" id="channelName" placeholder="‡πÄ‡∏ä‡πà‡∏ô: LINE OA ‡∏´‡∏•‡∏±‡∏Å" required>
                    <small>‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô LINE)</small>
                </div>

                <div class="form-group">
                    <label for="lineAccessToken">üîë Channel Access Token</label>
                    <textarea id="lineAccessToken" style="min-height: 100px; font-family: 'Courier New', monospace;" placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Channel Access Token" required></textarea>
                    <small>‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å LINE Developers Console ‚Üí Messaging API</small>
                </div>

                <div class="form-group">
                    <label for="lineChannelSecret">üîê Channel Secret</label>
                    <input type="text" id="lineChannelSecret" placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Channel Secret" required>
                    <small>‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å LINE Developers Console ‚Üí Basic settings</small>
                </div>

                <div class="info-box">
                    üí° <strong>‡∏ß‡∏¥‡∏ò‡∏µ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</strong><br>
                    1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà <a href="https://developers.line.biz/console/" target="_blank">LINE Developers Console</a><br>
                    2. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Provider ‡πÅ‡∏•‡∏∞ Channel<br>
                    3. Channel Access Token: ‡πÅ‡∏ó‡πá‡∏ö "Messaging API"<br>
                    4. Channel Secret: ‡πÅ‡∏ó‡πá‡∏ö "Basic settings"
                </div>

                <div style="display: flex; gap: 10px; margin-top: 20px;">
                    <button type="submit" class="btn btn-success" style="flex: 1;">üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å</button>
                    <button type="button" class="btn btn-secondary" onclick="closeChannelModal()" style="flex: 1;">‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- View Details Modal -->
<div id="detailsModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>üëÅÔ∏è ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Channel</h2>
            <button class="close" onclick="closeDetailsModal()">&times;</button>
        </div>
        <div class="modal-body" id="detailsContent">
            <!-- Details will be inserted here -->
        </div>
    </div>
</div>

<script>
    let channels = <%- JSON.stringify(lineChannels) %>;
    let isEditMode = false;
    let currentChannelId = null;

    // Update Feature
    async function updateFeature(channelId, featureName, enabled) {
        try {
            const channel = channels.find(ch => ch.id === channelId);
            if (!channel) return;

            const features = {
                activities: channel.features?.activities || false,
                promotions: channel.features?.promotions || false,
                flexMessages: channel.features?.flexMessages || false
            };

            features[featureName] = enabled;

            const response = await fetch(`/settings/line/features/${channelId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(features)
            });

            const result = await response.json();

            if (result.success) {
                showAlert('success', `${enabled ? '‡πÄ‡∏õ‡∏¥‡∏î' : '‡∏õ‡∏¥‡∏î'}‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
                // Update local data
                channel.features = features;
            } else {
                showAlert('error', result.message);
                // Revert checkbox
                setTimeout(() => location.reload(), 1000);
            }
        } catch (error) {
            showAlert('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
            setTimeout(() => location.reload(), 1000);
        }
    }

    // Add Channel
    function openAddChannelModal() {
        isEditMode = false;
        currentChannelId = null;
        document.getElementById('modalTitle').textContent = '‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏° LINE Channel';
        document.getElementById('channelForm').reset();
        document.getElementById('channelId').value = '';
        document.getElementById('channelModal').style.display = 'block';
    }

    // Edit Channel
    function editChannel(id) {
        isEditMode = true;
        currentChannelId = id;
        const channel = channels.find(ch => ch.id === id);
        
        if (!channel) {
            showAlert('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö Channel');
            return;
        }

        document.getElementById('modalTitle').textContent = '‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç LINE Channel';
        document.getElementById('channelId').value = channel.id;
        document.getElementById('channelName').value = channel.name;
        document.getElementById('lineAccessToken').value = channel.channelAccessToken;
        document.getElementById('lineChannelSecret').value = channel.channelSecret;
        document.getElementById('channelModal').style.display = 'block';
    }

    // Submit Form
    document.getElementById('channelForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = {
            channelName: document.getElementById('channelName').value.trim(),
            lineAccessToken: document.getElementById('lineAccessToken').value.trim(),
            lineChannelSecret: document.getElementById('lineChannelSecret').value.trim()
        };

        if (!formData.channelName || !formData.lineAccessToken || !formData.lineChannelSecret) {
            showAlert('error', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
            return;
        }

        const url = isEditMode ? `/settings/line/update/${currentChannelId}` : '/settings/line/add';
        
        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });

            const result = await response.json();

            if (result.success) {
                showAlert('success', result.message);
                setTimeout(() => location.reload(), 1500);
            } else {
                showAlert('error', result.message);
            }
        } catch (error) {
            showAlert('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
        }
    });

    // Delete Channel
    async function deleteChannel(id, name) {
        if (!confirm(`‡∏•‡∏ö Channel "${name}"?\n\n‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ!`)) {
            return;
        }

        try {
            const response = await fetch(`/settings/line/delete/${id}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });

            const result = await response.json();

            if (result.success) {
                showAlert('success', result.message);
                setTimeout(() => location.reload(), 1500);
            } else {
                showAlert('error', result.message);
            }
        } catch (error) {
            showAlert('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
        }
    }

    // Toggle Channel
    async function toggleChannel(id, enabled) {
        try {
            const response = await fetch(`/settings/line/toggle/${id}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ enabled })
            });

            const result = await response.json();

            if (result.success) {
                showAlert('success', result.message);
                setTimeout(() => location.reload(), 1000);
            } else {
                showAlert('error', result.message);
                setTimeout(() => location.reload(), 1000);
            }
        } catch (error) {
            showAlert('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
            setTimeout(() => location.reload(), 1000);
        }
    }

    // Test Channel
    async function testChannel(id) {
        const btn = event.target;
        const originalText = btn.textContent;
        btn.disabled = true;
        btn.textContent = 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...';

        try {
            const response = await fetch(`/settings/line/test/${id}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });

            const result = await response.json();

            if (result.success) {
                showAlert('success', `‚úÖ ${result.message}\n\n‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á: ${result.profile.displayName || 'N/A'}\nBasic ID: ${result.profile.basicId || 'N/A'}`);
            } else {
                showAlert('error', result.message);
            }
        } catch (error) {
            showAlert('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
        } finally {
            btn.disabled = false;
            btn.textContent = originalText;
        }
    }

    // View Channel Details
    function viewChannelDetails(id) {
        const channel = channels.find(ch => ch.id === id);
        
        if (!channel) {
            showAlert('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö Channel');
            return;
        }

        const features = channel.features || { activities: true, promotions: true, flexMessages: true };
        const featureList = [];
        if (features.activities) featureList.push('üéÅ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ä‡∏£‡πå');
        if (features.promotions) featureList.push('üé® ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô');
        if (features.flexMessages) featureList.push('üí¨ Flex Messages');

        const detailsHtml = `
            <div style="text-align: center; margin-bottom: 20px;">
                ${channel.profilePictureUrl ? 
                    `<img src="${channel.profilePictureUrl}" alt="${channel.name}" style="width: 100px; height: 100px; border-radius: 50%; border: 3px solid #667eea;" onerror="this.outerHTML='<div style=\\'width:100px;height:100px;border-radius:50%;background:#667eea;color:white;display:flex;align-items:center;justify-content:center;font-size:3em;margin:0 auto\\'>ü§ñ</div>'">` :
                    `<div style="width: 100px; height: 100px; border-radius: 50%; background: #667eea; color: white; display: flex; align-items: center; justify-content: center; font-size: 3em; margin: 0 auto;">ü§ñ</div>`
                }
                <h3 style="margin-top: 15px;">${channel.name}</h3>
                <small style="color: #666;">${channel.displayName || 'N/A'}</small>
            </div>

            <div style="background: #f8f9fa; padding: 15px; border-radius: 10px; margin-bottom: 10px;">
                <strong>üÜî Channel ID:</strong><br>
                <code style="word-break: break-all;">${channel.id}</code>
            </div>

            <div style="background: #f8f9fa; padding: 15px; border-radius: 10px; margin-bottom: 10px;">
                <strong>üì± Basic ID:</strong><br>
                <code>${channel.basicId || 'N/A'}</code>
            </div>

            <div style="background: #f8f9fa; padding: 15px; border-radius: 10px; margin-bottom: 10px;">
                <strong>üéØ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</strong><br>
                ${featureList.length > 0 ? featureList.join('<br>') : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}
            </div>

            <div style="background: #f8f9fa; padding: 15px; border-radius: 10px; margin-bottom: 10px;">
                <strong>üîë Channel Access Token:</strong><br>
                <code style="word-break: break-all; font-size: 0.8em;">${channel.channelAccessToken}</code>
            </div>

            <div style="background: #f8f9fa; padding: 15px; border-radius: 10px; margin-bottom: 10px;">
                <strong>üîê Channel Secret:</strong><br>
                <code style="word-break: break-all;">${channel.channelSecret}</code>
            </div>

            <div style="background: #f8f9fa; padding: 15px; border-radius: 10px; margin-bottom: 10px;">
                <strong>üìÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠:</strong><br>
                ${new Date(channel.createdAt).toLocaleString('th-TH')}
            </div>

            <div style="background: ${channel.enabled ? '#d4edda' : '#f8d7da'}; padding: 15px; border-radius: 10px; text-align: center;">
                <strong style="color: ${channel.enabled ? '#155724' : '#721c24'};">
                    ${channel.enabled ? '‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‚ùå ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}
                </strong>
            </div>

            <button class="btn btn-secondary" onclick="closeDetailsModal()" style="width: 100%; margin-top: 20px;">
                ‚úñÔ∏è ‡∏õ‡∏¥‡∏î
            </button>
        `;

        document.getElementById('detailsContent').innerHTML = detailsHtml;
        document.getElementById('detailsModal').style.display = 'block';
    }

    // Copy Webhook URL
    function copyWebhookUrl() {
        const url = '<%= webhookUrl %>';
        navigator.clipboard.writeText(url).then(() => {
            showAlert('success', '‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Webhook URL ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        }).catch(() => {
            showAlert('error', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏î‡πâ');
        });
    }

    // Test Webhook
    async function testWebhook() {
        const btn = document.getElementById('testBtn');
        const result = document.getElementById('testResult');
        
        btn.disabled = true;
        btn.textContent = 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...';
        result.innerHTML = '';

        try {
            const response = await fetch('/settings/test-webhook', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });

            const data = await response.json();

            if (data.success) {
                result.innerHTML = `<div style="background: #d4edda; color: #155724; padding: 15px; border-radius: 8px; margin-top: 10px;">‚úÖ ${data.message}</div>`;
            } else {
                result.innerHTML = `<div style="background: #f8d7da; color: #721c24; padding: 15px; border-radius: 8px; margin-top: 10px;">‚ùå ${data.message}</div>`;
            }
        } catch (error) {
            result.innerHTML = `<div style="background: #f8d7da; color: #721c24; padding: 15px; border-radius: 8px; margin-top: 10px;">‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}</div>`;
        } finally {
            btn.disabled = false;
            btn.textContent = 'üî¨ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠';
        }
    }

    // Clear User Data
    async function clearUserData() {
        if (!confirm('‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î?\n\n‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ!')) {
            return;
        }

        if (!confirm('‚ö†Ô∏è ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) {
            return;
        }

        try {
            const response = await fetch('/settings/clear-users', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' }
            });

            const result = await response.json();

            if (result.success) {
                showAlert('success', result.message);
                setTimeout(() => location.reload(), 1500);
            } else {
                showAlert('error', result.message);
            }
        } catch (error) {
            showAlert('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
        }
    }

    // Modal Functions
    function closeChannelModal() {
        document.getElementById('channelModal').style.display = 'none';
    }

    function closeDetailsModal() {
        document.getElementById('detailsModal').style.display = 'none';
    }

    window.onclick = function(event) {
        if (event.target.classList.contains('modal')) {
            event.target.style.display = 'none';
        }
    }
</script>

<%- include('partials/footer') %>